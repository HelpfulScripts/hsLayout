{
	"id": 0,
	"name": "hsData",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 49,
			"name": "\"Data\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/standalone/hsData/src/Data.ts",
			"comment": {},
			"children": [
				{
					"id": 63,
					"name": "Data",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "# Data\nA simple in-memory database that holds data in rows of columns."
					},
					"children": [
						{
							"id": 75,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 76,
									"name": "new Data",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 77,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "DataSet",
												"id": 50
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Data",
										"id": 63
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 81,
									"character": 5
								}
							]
						},
						{
							"id": 125,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 381,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DataRow",
									"id": 160
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 126,
							"name": "meta",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 382,
									"character": 16
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "MetaStruct",
									"id": 57
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 127,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 383,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 142,
							"name": "allRows",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 143,
									"name": "allRows",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "A generator that provides the specified column value for each row in `Data` in sequence."
									},
									"parameters": [
										{
											"id": 144,
											"name": "column",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DataVal",
												"id": 159
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 482,
									"character": 21
								}
							]
						},
						{
							"id": 112,
							"name": "castData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 113,
									"name": "castData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 249,
									"character": 19
								}
							]
						},
						{
							"id": 149,
							"name": "castVal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 150,
									"name": "castVal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "The result of the cast.",
										"tags": [
											{
												"tag": "description",
												"text": "Casts the sample to the specified data type.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 151,
											"name": "type",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The type to cast into. In case of _any_ - i.e. `type`\ndoes not match any of the previous keywords, no casting occurs."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 152,
											"name": "val",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DataVal",
												"id": 159
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataVal",
										"id": 159
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 518,
									"character": 19
								}
							]
						},
						{
							"id": 90,
							"name": "colAdd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 91,
									"name": "colAdd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "adds a new column to the data set. if `newCol` already exists,\nthe column index is returned withoput change.",
										"returns": "the index for the new column\n"
									},
									"parameters": [
										{
											"id": 92,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the name of the new column"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 135,
									"character": 17
								}
							]
						},
						{
							"id": 93,
							"name": "colInitialize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 94,
									"name": "colInitialize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "initializes the specifed column with values, adding a new column if needed.\nIf `val`is a function, it is called as ```\nval(colValue:DataVal, rowIndex:number, row:DataRow)\n```"
									},
									"parameters": [
										{
											"id": 95,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the column to initialize"
											},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										},
										{
											"id": 96,
											"name": "initializer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the value to initialize with, or a function whose return\nvalue is used to initialize the column\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 157,
									"character": 24
								}
							]
						},
						{
							"id": 100,
							"name": "colName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 101,
									"name": "colName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "returns the column name for the specified column.\n`col` can be either an index or a name.",
										"returns": "the column name or `undefined`.\n"
									},
									"parameters": [
										{
											"id": 102,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 189,
									"character": 18
								}
							]
						},
						{
							"id": 103,
							"name": "colNames",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 104,
									"name": "colNames",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "returns the names for all columns.",
										"returns": "an array of strings with the names.\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 200,
									"character": 19
								}
							]
						},
						{
							"id": 97,
							"name": "colNumber",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 98,
									"name": "colNumber",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "returns the column index of the specified column.\n`col` can be either an index or a name.",
										"returns": "the column number or `undefined`.\n"
									},
									"parameters": [
										{
											"id": 99,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 174,
									"character": 20
								}
							]
						},
						{
							"id": 105,
							"name": "colType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 106,
									"name": "colType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "returns the column type for the specified column.\n`col` can be either an index or a name.",
										"returns": "the column type.\n"
									},
									"parameters": [
										{
											"id": 107,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 210,
									"character": 18
								}
							]
						},
						{
							"id": 83,
							"name": "export",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 84,
									"name": "export",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Exports to an object literal"
									},
									"type": {
										"type": "reference",
										"name": "DataSet",
										"id": 50
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 106,
									"character": 17
								}
							]
						},
						{
							"id": 114,
							"name": "filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 115,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "filters this data set and returns a new data set with a\nshallow copy of rows that pass the `condition`.\nSee {@link DataFilters DataFilters} for rules and examples on how to construct conditions.",
										"returns": "a new Data object with rows that pass the filter\n"
									},
									"parameters": [
										{
											"id": 116,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "filters"
											},
											"type": {
												"type": "reference",
												"name": "Condition",
												"id": 9
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Data",
										"id": 63
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 266,
									"character": 17
								}
							]
						},
						{
							"id": 108,
							"name": "findDomain",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 109,
									"name": "findDomain",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "modifies `domain` to include all values in column `col`."
									},
									"parameters": [
										{
											"id": 110,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the column name or index"
											},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										},
										{
											"id": 111,
											"name": "domain",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the\n"
											},
											"type": {
												"type": "reference",
												"name": "Domain",
												"id": 157
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 220,
									"character": 21
								}
							]
						},
						{
							"id": 139,
							"name": "findType",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 140,
									"name": "findType",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "the type ('number', 'date', 'percent', 'nominal', 'currency') corresponding to the sample\n",
										"tags": [
											{
												"tag": "description",
												"text": "determines the data type. Supported types are\n```\n'date':    sample represents a Date, either as a Date object or a String\n'number':  sample represents a number\n'percent': sample represents a percentage (special case of a real number)\n'nominal': sample represents a nominal (ordinal or categorical) value\n```"
											}
										]
									},
									"parameters": [
										{
											"id": 141,
											"name": "val",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the value to bve typed."
											},
											"type": {
												"type": "reference",
												"name": "DataVal",
												"id": 159
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 451,
									"character": 20
								}
							]
						},
						{
							"id": 136,
							"name": "findTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 137,
									"name": "findTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Determines the type of data in `col`. An array of counts is created for all\nencountered types, sorted by descending frequency. THe most likely type in position 0\nof the array is returned.",
										"returns": "the most likely type of data in `col`.\n"
									},
									"parameters": [
										{
											"id": 138,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the index of the column to be typed."
											},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 419,
									"character": 21
								}
							]
						},
						{
							"id": 87,
							"name": "getColumn",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 88,
									"name": "getColumn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the values in the specified column as a new array."
									},
									"parameters": [
										{
											"id": 89,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the column to return.\n"
											},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "DataVal",
											"id": 159
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 124,
									"character": 20
								}
							]
						},
						{
							"id": 85,
							"name": "getData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 86,
									"name": "getData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "returns the 2D array underlying the data base."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "DataRow",
											"id": 160
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 116,
									"character": 18
								}
							]
						},
						{
							"id": 128,
							"name": "getMeta",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 129,
									"name": "getMeta",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 130,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "MetaStruct",
										"id": 57
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 385,
									"character": 19
								}
							]
						},
						{
							"id": 78,
							"name": "getName",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 79,
									"name": "getName",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "the `name` field for this data base, if any\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 90,
									"character": 18
								}
							]
						},
						{
							"id": 80,
							"name": "import",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 81,
									"name": "import",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Imports data from an object literal `data`"
									},
									"parameters": [
										{
											"id": 82,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the data set to import\n"
											},
											"type": {
												"type": "reference",
												"name": "DataSet",
												"id": 50
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 98,
									"character": 17
								}
							]
						},
						{
							"id": 121,
							"name": "map",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 122,
									"name": "map",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": " Maps one or more columns in each rows of values based\non the result of the `mapFn`, which behaves similarly to the Array.map() method.\nTwo modes are supported:\n# Array Mode\nIf `col` is omitted, the `mapFn` is passed the column arrays per row as parameter.\nThis allows for complex mapping combining conditions across multiple columns.\n```\ndata.map(function(values){\n   values[1] = values[3] * values[5];\n   return values;\n});\n```\nBe sure to return the `values` array as a result.\n# Column mode\nIf `col` is specified, either as index or by column name, the respective column value is passed\ninto `mapFn`, along with the row index and the entire row array. This allows for simple mapping.\n```\ndata.map('Price', function(value, i, values) {\n   return value * 2;\n});\n```",
										"returns": "a new Data object containing the mapping.\n"
									},
									"parameters": [
										{
											"id": 123,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the data column, or columns, to apply the mapping to."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ColumnReference",
														"id": 158
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ColumnReference",
															"id": 158
														}
													}
												]
											}
										},
										{
											"id": 124,
											"name": "mapFn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a function to implement the mapping,\ncalled on each row of the data set in turn as `mapFn(val, i, c, rows)`, where\n- `val`: the column value in the current row\n- `c`: the column index in the current row\n- `i`: the row index\n- `rows`: the rows being iterated over\n`    *\nfollows the same specifications as the function passed to Array.map().<br>\nFor column mode, some predefined map functions can be invoked by providing a\nrespective string instead of a function. The following functions are defined:\n<table>\n<tr><td>'noop'</td><td>replace value with itself, performing no operation.</td></tr>\n<tr><td>'cumulate'</td><td>replace value with the cumulative sum of values up to the current element.</td></tr>\n</table>"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "mapFn",
														"id": 124
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Data",
										"id": 63
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 348,
									"character": 14
								}
							]
						},
						{
							"id": 131,
							"name": "setData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 132,
									"name": "setData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "sets `data` to the existing data set. If data has previously been set,\n`data` will be added to the end of the list if all `names`  match those of the\nexisting set."
									},
									"parameters": [
										{
											"id": 133,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the data to add"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DataRow",
													"id": 160
												}
											}
										},
										{
											"id": 134,
											"name": "names",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an array of names that match the columns"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 135,
											"name": "autoType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "unless set to false, the method will attempt to determine the\ntype of data and automatically cast data points to their correct value\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 401,
									"character": 19
								}
							]
						},
						{
							"id": 117,
							"name": "sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 118,
									"name": "sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "the Data object in order to allow for chaining.\n",
										"tags": [
											{
												"tag": "description",
												"text": "Sorts the rows of values based on the result of the `sortFn`,\nwhich behaves similarly to the Array.sort method.\nTwo modes are supported:\n# Array Mode\nIf `col` is omitted, the column arrays are passed as samples into the `sortFn`.\nThis allows for complex sorts, combining conditions across multiple columns.\n```\ndata.sort((row1, row2) => row1[5] - row2[5] );\n```\n# Column mode\nIf `col` is specified, either as index or by column name, the respective column value is passed\ninto `sortFn`. This allows filtering for simple conditions.<br>\n**The specified column will be automatically cast prior to sorting**<br>\n`data.sort('Date', function(val1, val2) { return val1 - val2; });`"
											}
										]
									},
									"parameters": [
										{
											"id": 119,
											"name": "sortFn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a function to implement the conditions,\nfollows the same specifications as the function passed to Array.sort().\nSome predefined sort function can be invoked by providing a\nrespective string instead of a function. The following functions are defined:\n<table>\n<tr><td>'`ascending`'</td><td>sort in ascending order.</td></tr>\n<tr><td>'`descending`'</td><td>sort in decending order.</td></tr>\n</table>"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"name": "sortFn",
														"id": 119
													}
												]
											}
										},
										{
											"id": 120,
											"name": "col",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "optional; the data column to use for sorting."
											},
											"type": {
												"type": "reference",
												"name": "ColumnReference",
												"id": 158
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Data",
										"id": 63
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 296,
									"character": 15
								}
							]
						},
						{
							"id": 145,
							"name": "toDate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 146,
									"name": "toDate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "a new Date object parsed from `str`.",
										"tags": [
											{
												"tag": "description",
												"text": "returns a new Date object parsed from `str` and corrects for a difference in\ninterpreting centuries between webkit and mozilla in converting strings to Dates:\nThe string \"15/7/03\" will convert to Jul 15 1903 in Mozilla and July 15 2003 in Webkit.\nIf `limitYear` is not specified this method uses 1970 as the decision date:\nyears 00-69 will be interpreted as 2000-2069, years 70-99 as 1970-1999.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 147,
											"name": "val",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the string to convert to a date"
											},
											"type": {
												"type": "reference",
												"name": "DataVal",
												"id": 159
											}
										},
										{
											"id": 148,
											"name": "limitYear",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the year below which the century is corrected. Defaults to 1970."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "1970"
										}
									],
									"type": {
										"type": "reference",
										"name": "Date"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 499,
									"character": 18
								}
							]
						},
						{
							"id": 71,
							"name": "toDataSet",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 72,
									"name": "toDataSet",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 73,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DataLiteralSet",
												"id": 161
											}
										},
										{
											"id": 74,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DataSet",
										"id": 50
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 75,
									"character": 27
								}
							]
						},
						{
							"id": 64,
							"name": "type",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"children": [
								{
									"id": 68,
									"name": "currency",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "Data.ts",
											"line": 70,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"currency data\""
								},
								{
									"id": 67,
									"name": "date",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "Data.ts",
											"line": 69,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"date data\""
								},
								{
									"id": 66,
									"name": "name",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "Data.ts",
											"line": 68,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"name data\""
								},
								{
									"id": 70,
									"name": "nominal",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "Data.ts",
											"line": 72,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"nominal data\""
								},
								{
									"id": 65,
									"name": "number",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "Data.ts",
											"line": 67,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"number data\""
								},
								{
									"id": 69,
									"name": "percent",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "Data.ts",
											"line": 71,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"percent data\""
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										68,
										67,
										66,
										70,
										65,
										69
									]
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 66,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								75
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								125,
								126,
								127
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								142,
								112,
								149,
								90,
								93,
								100,
								103,
								97,
								105,
								83,
								114,
								108,
								139,
								136,
								87,
								85,
								128,
								78,
								80,
								121,
								131,
								117,
								145,
								71
							]
						},
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								64
							]
						}
					],
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 62,
							"character": 17
						}
					]
				},
				{
					"id": 50,
					"name": "DataSet",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "a JSON format data set, using arrays of names and rows"
					},
					"children": [
						{
							"id": 52,
							"name": "colNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "an array of column names. Each name matches the column with the same index in DataRow"
							},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 36,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 51,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "an optional name for the data set"
							},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 34,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 53,
							"name": "rows",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "rows of data"
							},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 38,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DataRow",
									"id": 160
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								52,
								51,
								53
							]
						}
					],
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 32,
							"character": 24
						}
					]
				},
				{
					"id": 57,
					"name": "MetaStruct",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 60,
							"name": "accessed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 49,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 61,
							"name": "cast",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 50,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 59,
							"name": "column",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 48,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 58,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 47,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 62,
							"name": "types",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 51,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "TypeStruct",
									"id": 54
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								60,
								61,
								59,
								58,
								62
							]
						}
					],
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 46,
							"character": 20
						}
					]
				},
				{
					"id": 54,
					"name": "TypeStruct",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 56,
							"name": "count",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 44,
									"character": 42
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 55,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 44,
									"character": 27
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								56,
								55
							]
						}
					],
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 44,
							"character": 20
						}
					]
				},
				{
					"id": 158,
					"name": "ColumnReference",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "defines a Column Reference, either as column name or index in the {@link Data.DataRow `DataRow`} array"
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 23,
							"character": 27
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 161,
					"name": "DataLiteralSet",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "a JSON format data set, using an array of {name:value, ...} literals"
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 42,
							"character": 26
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						]
					}
				},
				{
					"id": 160,
					"name": "DataRow",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "a single row of column values"
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 29,
							"character": 19
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "DataVal",
							"id": 159
						}
					}
				},
				{
					"id": 159,
					"name": "DataVal",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "a generic data value type, used in the {@link Data.DataRow `DataRow`} array"
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 26,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "Date"
							}
						]
					}
				},
				{
					"id": 155,
					"name": "DateDomain",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "defines a Date domain that includes all values of a column"
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 14,
							"character": 22
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "reference",
								"name": "Date"
							},
							{
								"type": "reference",
								"name": "Date"
							}
						]
					}
				},
				{
					"id": 157,
					"name": "Domain",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "defines a generic domain that can be any of the typed domains."
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 20,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "NumDomain",
								"id": 154
							},
							{
								"type": "reference",
								"name": "DateDomain",
								"id": 155
							},
							{
								"type": "reference",
								"name": "NameDomain",
								"id": 156
							}
						]
					}
				},
				{
					"id": 156,
					"name": "NameDomain",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "defines a categorical domain that includes all values of a column"
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 17,
							"character": 22
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 154,
					"name": "NumDomain",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "defines a numeric domain that includes all values of a column"
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 11,
							"character": 21
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 153,
					"name": "NumRange",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "defines a [min-max] range"
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 8,
							"character": 20
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 167,
					"name": "mapFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 55,
							"character": 17
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 168,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 169,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 170,
											"name": "colVal",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 171,
											"name": "colIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 172,
											"name": "rowIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 173,
											"name": "rows",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "array",
													"elementType": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 55,
									"character": 20
								}
							]
						}
					}
				},
				{
					"id": 162,
					"name": "sortFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "Data.ts",
							"line": 54,
							"character": 18
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 163,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 164,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 165,
											"name": "x",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 166,
											"name": "y",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "Data.ts",
									"line": 54,
									"character": 20
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						63
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						50,
						57,
						54
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						158,
						161,
						160,
						159,
						155,
						157,
						156,
						154,
						153,
						167,
						162
					]
				}
			],
			"sources": [
				{
					"fileName": "Data.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"DataFilters\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/standalone/hsData/src/DataFilters.ts",
			"comment": {
				"shortText": "The HsData object will feature its own column meta information, as well as\na copy of the rows array which allows for `filter` and `sort` operations.\nHowever, the column arrays will be shared with the original HsData object in order to be memory efficient.\nThis means that `map` and `newColumn` operations on the new object will affect the original object or any\nobject derived via `query`.",
				"tags": [
					{
						"tag": "description",
						"text": "executes a query on the data. Each row in the data is checked and those for which\n`conditions` is true are returned as a new HsData object.\n\n## General Condition\n```\nCondition =\n   IndexCondition            -> conditions on the row index\n|| RecursiveCondition        -> (set of) conditions on column values\n```\n\n## IndexCondition\n```\nIndexCondition =\n   rowIndex:number           -> true if row index matches\n```\n\n## RecursiveCondition\n```\nRecursiveCondition =\n   OrCondition               -> OR: true if any compound condition is true\n|| AndCondition              -> AND: true if all compound conditions are true\n\nOrCondition =                -> OR: true if\n   AndCondition[]               -> any of the AndConditions are true\n|| IndexCondition[]             -> any of thr IndexConditions are true\n\nAndCondition =               -> AND: true if\n   SetAndCondition              -> all SetAndConditions are true\n|| TermAndCondition             -> or if all TermAndConditions are true\n\nSetAndCondition = {          -> AND: true if all sub-conditions are true\n   'or':  RecursiveCondition    -> true if any RecursiveCondition is true\n|| 'and': RecursiveCondition    -> true if all RecursiveCondition are true\n|| 'not': RecursiveCondition    -> true if the condition is false\n\nTermAndCondition = {         -> Terminal AND: true if all terminal sub-conditions are true\n   colDesc:colValue             -> true if colValue matches\n|| colDesc:[colValue, ...]      -> true if any of the colValues match\n|| colDesc:function(value,row)  -> true if function returns true\n}\n\ncolDesc = either column name or index\n```\n\n## Practical Tips\n```\n   {'or': [recurCond, ...]}    -> OR, same as [recurCond, ...]\n|| {'or': {SetCond, ...}}      -> OR, same as [SetCond, ...]\n|| {'and': [recurCond, ...]}   -> AND, true if all recurCond are true\n|| {'and': {SetCond, ...}}     -> AND, same as {SetCond, ...}\n|| {'not': {SetCond, ...}}     -> NAND: true if the SetCond are true\n|| {'not': [recurCond, ...]}   -> NOR: true if any of the recurCond are true\n```\n\n# Example\n<example height=1000px>\n<file name=\"script.js\">\nconst colNames = ['Name', 'Value', 'Start', 'End'];\nconst rows = [\n  ['Harry', '100', '3/1/14', '11/20/14'],\n  ['Mary', '1500', '7/1/14',  '9/30/14'],\n  ['Peter', '400', '5/20/14', '4/30/15'],\n  ['Jane', '700', '11/13/14', '8/15/15']\n]\nconst data = new hsdata.Data({colNames:colNames, rows:rows});\n\nqueries = [\n  ['0', undefined,                           'undefined query => pass all'],\n  ['1', [],                                  'empty OR:  []   => fail all'],\n  ['2', {},                                  'empty AND: {}   => pass all'],\n  ['3', 1,                                   '2nd row: pass row 1'],\n  ['4', [1,3],                               '2nd+4th: pass rows: 1 and 3'],\n  ['5', {Name:\"Jane\"},                       'Name is Jane'],\n  ['6', {1:1500},                            'Column 2 is 1500'],\n  ['7', {Name:[\"Peter\", \"Jane\"]},            'Name is Peter or Jane'],\n  ['8', [{Name:\"Peter\"}, {Value:1500}],      'Name is Peter or Value is 1500'],\n  ['9', {or:{Name:\"Peter\", Value:1500}},     'OR:  same as 8:'],\n  ['A', {or:[{Name:\"Peter\"}, {Value:1500}]}, 'OR: [{Name is Peter}, {Value is 1500}]'],\n  ['B', {Name:\"Peter\", Value:400},           'Name is Peter and Value is 400'],\n  ['C', {and:{Name:\"Peter\", Value:400}},     'AND: {Name is Peter, Value is 400}'],\n  ['D', {and:{Name:\"Peter\", Value:1500}},    'AND: {Name is Peter, Value is 1500}'],\n  ['E', {and:[{Name:\"Peter\"}, {Value:400}]}, 'AND:[{Name is Peter}, {Value is 400}]'],\n  ['F', {and:[{Name:\"Peter\"}, {Value:1500}]},'AND:[{Name is Peter}, {Value is 1500}]'],\n  ['G', {not:{Name:\"Peter\", Value:400}},     'NAND: not {Name is Peter and Value is 400}'],\n  ['H', {not:{Name:\"Peter\", Value:1500}},    'NAND: not {Name is Peter and Value is 1500}'],\n  ['I', {not:[{Name:\"Peter\"}, {Value:1500}]},'NOR: not [{Name is Peter} or {Value is 1500}]'],\n  ['J', {Name:(v) => v.length===4},          'Name has 4 letters']\n];\n\nm.mount(root, {\n  view:() => m('', [\n      m('h3', 'Given the data set:'),\n      m('table#data', [\n          m('tr', colNames.map(n => m('th', n))),\n          ...rows.map(row => m('tr', [m('td', row[0]),m('td', row[1]),m('td', row[2].toDateString()),m('td', row[3].toDateString())]))\n      ]),\n      m('h3', 'The following queries yield:'),\n      m('table', [\n          m('tr', [m('th','#'), m('th','Query'), m('th',\"Live Result, by 'Name' field\")]),\n          ...queries.map(q => {\n              const result = data.filter(q[1]).getColumn('Name').join(', ');\n              return m('tr', [m('td',`${q[0]}:`), m('td',`${q[2]}`), m('td',`[ ${result} ]`)]);\n          })\n      ])\n  ])\n});\n</file>\n<file name='style.css'>\n  $exampleID { height: 600px; }\n  #data th { width:15%; }\n  table {\n      font-size: 10pt;\n      margin-left: 10px;\n  }\n</file>\n</example>\n"
					}
				]
			},
			"children": [
				{
					"id": 2,
					"name": "SetAndCondition",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 4,
							"name": "and",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "DataFilters.ts",
									"line": 144,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "RecursiveCondition",
								"id": 11
							}
						},
						{
							"id": 5,
							"name": "not",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "DataFilters.ts",
									"line": 145,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "RecursiveCondition",
								"id": 11
							}
						},
						{
							"id": 3,
							"name": "or",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "DataFilters.ts",
									"line": 143,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "RecursiveCondition",
								"id": 11
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								4,
								5,
								3
							]
						}
					],
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 142,
							"character": 32
						}
					]
				},
				{
					"id": 6,
					"name": "TermAndCondition",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"indexSignature": [
						{
							"id": 7,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 8,
									"name": "colDesc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "DataVal",
										"id": 159
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "DataVal",
											"id": 159
										}
									},
									{
										"type": "reference",
										"name": "TermConditionFunction",
										"id": 14
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 148,
							"character": 33
						}
					]
				},
				{
					"id": 13,
					"name": "AndCondition",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 140,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "SetAndCondition",
								"id": 2
							},
							{
								"type": "reference",
								"name": "TermAndCondition",
								"id": 6
							}
						]
					}
				},
				{
					"id": 9,
					"name": "Condition",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 133,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "IndexCondition",
								"id": 10
							},
							{
								"type": "reference",
								"name": "RecursiveCondition",
								"id": 11
							}
						]
					}
				},
				{
					"id": 10,
					"name": "IndexCondition",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "true if row index matches the number(s)"
					},
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 136,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 12,
					"name": "OrCondition",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 139,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AndCondition",
									"id": 13
								}
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "IndexCondition",
									"id": 10
								}
							}
						]
					}
				},
				{
					"id": 11,
					"name": "RecursiveCondition",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 138,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "AndCondition",
								"id": 13
							},
							{
								"type": "reference",
								"name": "OrCondition",
								"id": 12
							}
						]
					}
				},
				{
					"id": 38,
					"name": "ReduceFn",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 231,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 39,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 40,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 41,
											"name": "keep",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 42,
											"name": "row",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DataRow",
												"id": 160
											}
										},
										{
											"id": 43,
											"name": "i",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "DataFilters.ts",
									"line": 231,
									"character": 22
								}
							]
						}
					}
				},
				{
					"id": 14,
					"name": "TermConditionFunction",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 156,
							"character": 33
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 15,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 16,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 17,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DataVal",
												"id": 159
											}
										},
										{
											"id": 18,
											"name": "row",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DataRow",
												"id": 160
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "DataFilters.ts",
									"line": 156,
									"character": 35
								}
							]
						}
					}
				},
				{
					"id": 44,
					"name": "filter",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 45,
							"name": "filter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 46,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Data",
										"id": 63
									}
								},
								{
									"id": 47,
									"name": "cond",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Condition",
										"id": 9
									}
								},
								{
									"id": 48,
									"name": "reduceFn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "ReduceFn",
												"id": 38
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Data",
								"id": 63
							}
						}
					],
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 233,
							"character": 22
						}
					]
				},
				{
					"id": 28,
					"name": "resolveCondition",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 29,
							"name": "resolveCondition",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "applies `condition` to a row of data and returns `true` if the row passes."
							},
							"parameters": [
								{
									"id": 30,
									"name": "condition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the complex condition to test against"
									},
									"type": {
										"type": "reference",
										"name": "Condition",
										"id": 9
									}
								},
								{
									"id": 31,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the row values"
									},
									"type": {
										"type": "reference",
										"name": "DataRow",
										"id": 160
									}
								},
								{
									"id": 32,
									"name": "r",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the row index in the data set"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 33,
									"name": "colNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 34,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 35,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 36,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "DataFilters.ts",
													"line": 185,
													"character": 80
												}
											]
										}
									}
								},
								{
									"id": 37,
									"name": "and",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 185,
							"character": 25
						}
					]
				},
				{
					"id": 19,
					"name": "resolveTerminalCondition",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 20,
							"name": "resolveTerminalCondition",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 21,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 22,
									"name": "val",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 23,
									"name": "row",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "DataRow",
										"id": 160
									}
								},
								{
									"id": 24,
									"name": "colNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 25,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 26,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 27,
															"name": "name",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"sources": [
												{
													"fileName": "DataFilters.ts",
													"line": 159,
													"character": 79
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "DataFilters.ts",
							"line": 159,
							"character": 33
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2,
						6
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						13,
						9,
						10,
						12,
						11,
						38,
						14
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						44,
						28,
						19
					]
				}
			],
			"sources": [
				{
					"fileName": "DataFilters.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 174,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/standalone/hsData/src/index.ts",
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 175,
			"name": "\"overview\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/standalone/hsData/src/overview.ts",
			"comment": {
				"shortText": "# hsData",
				"text": "Helpful Scripts data management functions that are framework independent.\n\n## Data Types\n- &nbsp; {@link Data.NumRange NumRange} defines a single [min, max] numeric range.\n- &nbsp; {@link Data.NumDomain NumDomain} defines a numeric domain that includes all values of a column\n- &nbsp; {@link Data.DateDomain DateDomain} defines a Date domain that includes all values of a column\n- &nbsp; {@link Data.NameDomain NameDomain} defines a categorical domain that includes all values of a column\n- &nbsp; {@link Data.Domain Domain} defines a generic domain that can be any of the typed domains.\n- &nbsp; {@link Data.ColSpecifier ColSpecifier} defines a Column Specifier, either as column name or index in the {@link Data.DataRow `DataRow`} array\n- &nbsp; {@link Data.DataVal DataVal} a generic data value type, used in the {@link Data.DataRow `DataRow`} array\n- &nbsp; {@link Data.DataRow DataRow} a single row of column values\n\n## Data Class\n- &nbsp; {@link Data.Data Data} A simple row-column based database object, featuring named columns, sorting, mapping and filtering functions\n"
			},
			"sources": [
				{
					"fileName": "overview.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				49,
				1,
				174,
				175
			]
		}
	]
}