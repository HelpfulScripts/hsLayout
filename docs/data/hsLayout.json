{
	"id": 0,
	"name": "hsLayout",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 254,
			"name": "\"example/config.x\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/example/config.x.ts",
			"children": [
				{
					"id": 291,
					"name": "example",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 296,
							"name": "Footer",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/config.x.ts",
									"line": 55,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous class)"
							},
							"defaultValue": " class extends hslayout.Layout{ \n        getComponents(node:Vnode) { return m('.hs-site-footer', '(c) Helpful ; Scripts'); } \n    }"
						},
						{
							"id": 292,
							"name": "LeftHead",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/config.x.ts",
									"line": 41,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous class)"
							},
							"defaultValue": " class extends hslayout.Layout{ \n        getComponents(node:Vnode) { \n            return 'The Left Head'; \n        } \n    }"
						},
						{
							"id": 294,
							"name": "LeftNav",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/config.x.ts",
									"line": 49,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous class)"
							},
							"defaultValue": " class extends hslayout.Layout{ \n        getComponents(node:Vnode) { return m('', 'The Left Nav'); } \n    }"
						},
						{
							"id": 293,
							"name": "MainHead",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/config.x.ts",
									"line": 46,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous class)"
							},
							"defaultValue": " class extends hslayout.Layout{ \n        getComponents(node:Vnode) { return m('', 'The Main Head'); } \n    }"
						},
						{
							"id": 295,
							"name": "MainNav",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/config.x.ts",
									"line": 52,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous class)"
							},
							"defaultValue": " class extends hslayout.Layout{ \n        getComponents(node:Vnode) { return m('', 'The Main Nav'); } \n    }"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								296,
								292,
								294,
								293,
								295
							]
						}
					],
					"sources": [
						{
							"fileName": "example/config.x.ts",
							"line": 40,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 255,
					"name": "myConfig",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 256,
							"name": "Layout",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 259,
									"name": "content",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "example/config.x.ts",
											"line": 9,
											"character": 15
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reflection",
													"declaration": {
														"id": 260,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 261,
																"name": "Layout",
																"kind": 2097152,
																"kindString": "Object literal",
																"flags": {},
																"children": [
																	{
																		"id": 262,
																		"name": "columns",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/config.x.ts",
																				"line": 11,
																				"character": 23
																			}
																		],
																		"type": {
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		"defaultValue": " [\"200px\", \"fill\"]"
																	},
																	{
																		"id": 263,
																		"name": "content",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/config.x.ts",
																				"line": 12,
																				"character": 23
																			}
																		],
																		"type": {
																			"type": "array",
																			"elementType": {
																				"type": "union",
																				"types": [
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 264,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"children": [
																								{
																									"id": 265,
																									"name": "LeftHead",
																									"kind": 2097152,
																									"kindString": "Object literal",
																									"flags": {},
																									"children": [
																										{
																											"id": 267,
																											"name": "field",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/config.x.ts",
																													"line": 13,
																													"character": 59
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"route.field\""
																										},
																										{
																											"id": 266,
																											"name": "lib",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/config.x.ts",
																													"line": 13,
																													"character": 40
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"route.lib\""
																										}
																									],
																									"groups": [
																										{
																											"title": "Variables",
																											"kind": 32,
																											"children": [
																												267,
																												266
																											]
																										}
																									],
																									"sources": [
																										{
																											"fileName": "example/config.x.ts",
																											"line": 13,
																											"character": 30
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "object"
																									}
																								}
																							],
																							"groups": [
																								{
																									"title": "Object literals",
																									"kind": 2097152,
																									"children": [
																										265
																									]
																								}
																							]
																						}
																					},
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 268,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"children": [
																								{
																									"id": 269,
																									"name": "MainHead",
																									"kind": 2097152,
																									"kindString": "Object literal",
																									"flags": {},
																									"children": [
																										{
																											"id": 271,
																											"name": "field",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/config.x.ts",
																													"line": 14,
																													"character": 59
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"route.field\""
																										},
																										{
																											"id": 270,
																											"name": "lib",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/config.x.ts",
																													"line": 14,
																													"character": 40
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"route.lib\""
																										}
																									],
																									"groups": [
																										{
																											"title": "Variables",
																											"kind": 32,
																											"children": [
																												271,
																												270
																											]
																										}
																									],
																									"sources": [
																										{
																											"fileName": "example/config.x.ts",
																											"line": 14,
																											"character": 30
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "object"
																									}
																								}
																							],
																							"groups": [
																								{
																									"title": "Object literals",
																									"kind": 2097152,
																									"children": [
																										269
																									]
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		"defaultValue": " [\n                    { LeftHead:    { lib:\"route.lib\", field:\"route.field\"}},\n                    { MainHead:    { lib:\"route.lib\", field:\"route.field\"}}\n                ]"
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			262,
																			263
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "example/config.x.ts",
																		"line": 10,
																		"character": 18
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "object"
																}
															}
														],
														"groups": [
															{
																"title": "Object literals",
																"kind": 2097152,
																"children": [
																	261
																]
															}
														]
													}
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 272,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 273,
																"name": "Layout",
																"kind": 2097152,
																"kindString": "Object literal",
																"flags": {},
																"children": [
																	{
																		"id": 274,
																		"name": "columns",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/config.x.ts",
																				"line": 18,
																				"character": 23
																			}
																		],
																		"type": {
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		"defaultValue": " [\"200px\", \"fill\"]"
																	},
																	{
																		"id": 275,
																		"name": "content",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/config.x.ts",
																				"line": 19,
																				"character": 23
																			}
																		],
																		"type": {
																			"type": "array",
																			"elementType": {
																				"type": "union",
																				"types": [
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 276,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"children": [
																								{
																									"id": 277,
																									"name": "LeftNav",
																									"kind": 2097152,
																									"kindString": "Object literal",
																									"flags": {},
																									"children": [
																										{
																											"id": 279,
																											"name": "field",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/config.x.ts",
																													"line": 20,
																													"character": 58
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"route.field\""
																										},
																										{
																											"id": 278,
																											"name": "lib",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/config.x.ts",
																													"line": 20,
																													"character": 39
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"route.lib\""
																										}
																									],
																									"groups": [
																										{
																											"title": "Variables",
																											"kind": 32,
																											"children": [
																												279,
																												278
																											]
																										}
																									],
																									"sources": [
																										{
																											"fileName": "example/config.x.ts",
																											"line": 20,
																											"character": 29
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "object"
																									}
																								}
																							],
																							"groups": [
																								{
																									"title": "Object literals",
																									"kind": 2097152,
																									"children": [
																										277
																									]
																								}
																							]
																						}
																					},
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 280,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"children": [
																								{
																									"id": 281,
																									"name": "MainNav",
																									"kind": 2097152,
																									"kindString": "Object literal",
																									"flags": {},
																									"children": [
																										{
																											"id": 283,
																											"name": "field",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/config.x.ts",
																													"line": 21,
																													"character": 58
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"route.field\""
																										},
																										{
																											"id": 282,
																											"name": "lib",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/config.x.ts",
																													"line": 21,
																													"character": 39
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"route.lib\""
																										}
																									],
																									"groups": [
																										{
																											"title": "Variables",
																											"kind": 32,
																											"children": [
																												283,
																												282
																											]
																										}
																									],
																									"sources": [
																										{
																											"fileName": "example/config.x.ts",
																											"line": 21,
																											"character": 29
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "object"
																									}
																								}
																							],
																							"groups": [
																								{
																									"title": "Object literals",
																									"kind": 2097152,
																									"children": [
																										281
																									]
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		"defaultValue": " [\n                    { LeftNav:    { lib:\"route.lib\", field:\"route.field\"}},\n                    { MainNav:    { lib:\"route.lib\", field:\"route.field\"}}\n                ]"
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			274,
																			275
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "example/config.x.ts",
																		"line": 17,
																		"character": 18
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "object"
																}
															}
														],
														"groups": [
															{
																"title": "Object literals",
																"kind": 2097152,
																"children": [
																	273
																]
															}
														]
													}
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 284,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 285,
																"name": "Layout",
																"kind": 2097152,
																"kindString": "Object literal",
																"flags": {},
																"children": [
																	{
																		"id": 287,
																		"name": "content",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/config.x.ts",
																				"line": 26,
																				"character": 23
																			}
																		],
																		"type": {
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		"defaultValue": " ['(c) Helpful ; Scripts']"
																	},
																	{
																		"id": 286,
																		"name": "css",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/config.x.ts",
																				"line": 25,
																				"character": 19
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		},
																		"defaultValue": "\".hs-site-footer\""
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			287,
																			286
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "example/config.x.ts",
																		"line": 24,
																		"character": 20
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "object"
																}
															}
														],
														"groups": [
															{
																"title": "Object literals",
																"kind": 2097152,
																"children": [
																	285
																]
															}
														]
													}
												}
											]
										}
									},
									"defaultValue": " [{\n            Layout:{\n                columns: [\"200px\", \"fill\"],\n                content: [\n                    { LeftHead:    { lib:\"route.lib\", field:\"route.field\"}},\n                    { MainHead:    { lib:\"route.lib\", field:\"route.field\"}}\n                ]\n            }},{\n            Layout:{\n                columns: [\"200px\", \"fill\"], \n                content: [\n                    { LeftNav:    { lib:\"route.lib\", field:\"route.field\"}},\n                    { MainNav:    { lib:\"route.lib\", field:\"route.field\"}}\n                ]\n            }},\n            { Layout: {\n                css: '.hs-site-footer',\n                content: ['(c) Helpful ; Scripts']\n            }}\n        ]"
								},
								{
									"id": 258,
									"name": "css",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "example/config.x.ts",
											"line": 8,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\".my-example\""
								},
								{
									"id": 257,
									"name": "rows",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "example/config.x.ts",
											"line": 7,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": "  [\"30px\", \"fill\", \"10px\"]"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										259,
										258,
										257
									]
								}
							],
							"sources": [
								{
									"fileName": "example/config.x.ts",
									"line": 6,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 288,
							"name": "route",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 289,
									"name": "default",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "example/config.x.ts",
											"line": 31,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"/api\""
								},
								{
									"id": 290,
									"name": "paths",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "example/config.x.ts",
											"line": 32,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": " [\n            '/api',             // defines `http://localhost/#!/api/\n            '/api/:lib',        // defines `http://localhost/#!/api/:hsLib\n            '/api/:lib/:field'  // defines `http://localhost/#!/api/:hsLib/:id        \n        ]"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										289,
										290
									]
								}
							],
							"sources": [
								{
									"fileName": "example/config.x.ts",
									"line": 30,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								256,
								288
							]
						}
					],
					"sources": [
						{
							"fileName": "example/config.x.ts",
							"line": 5,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						291,
						255
					]
				}
			],
			"sources": [
				{
					"fileName": "example/config.x.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 297,
			"name": "\"example/layout.x\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/example/layout.x.ts",
			"comment": {
				"shortText": "# Layout Examples\n<a href='example/layout.html'>See example page</a>"
			},
			"children": [
				{
					"id": 345,
					"name": "cfg",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "example/layout.x.ts",
							"line": 120,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					},
					"defaultValue": " new HsConfig([example]).attachNodeTree(myConfig, document.body)"
				},
				{
					"id": 337,
					"name": "next",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 338,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 339,
									"name": "fn",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Timer"
							}
						}
					],
					"sources": [
						{
							"fileName": "example/layout.x.ts",
							"line": 74,
							"character": 13
						}
					]
				},
				{
					"id": 340,
					"name": "example",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 342,
							"name": "Header",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/layout.x.ts",
									"line": 83,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous class)"
							},
							"defaultValue": " class extends Layout {\n        getComponents(node: Vnode): Vnode {\n            return m(node.attrs.css, node.attrs.title);\n        }\n    }"
						},
						{
							"id": 343,
							"name": "Main",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/layout.x.ts",
									"line": 88,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous class)"
							},
							"defaultValue": " class extends Layout {\n        getComponents(node: Vnode): Vnode {\n            example.maxCount = node.attrs.maxCount || 3;\n            return super.getComponents(node);\n        }\n    }"
						},
						{
							"id": 344,
							"name": "aLeaf",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/layout.x.ts",
									"line": 94,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "(Anonymous class)"
							},
							"defaultValue": " class extends Layout {\n        count = 1;\n        inc = 1;\n\n        constructor() {\n            super();\n            next(() => {\n                this.count += this.inc;\n                if (this.count >= example.maxCount) { this.inc = -1; }\n                if (this.count <= 1)             { this.inc = +1; }\n                m.redraw();\n            });\n        }\n\n        getComponents(node: Vnode): Vnode {\n            const dims = node.attrs.columns || node.attrs.rows || node.attrs.tiles;\n            let text = '';\n            if (node.attrs.columns) { text = 'Columns'; }\n            if (node.attrs.rows) { text = 'Rows'; }\n            if (node.attrs.tiles) { text = 'Tiles'; }\n            const content = [...Array(this.count).keys()].map((c:number) => `${text}<br>${c+1}<br>[${dims.join()}]`);\n            return content;\n        }\n    }"
						},
						{
							"id": 341,
							"name": "maxCount",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "example/layout.x.ts",
									"line": 82,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								342,
								343,
								344,
								341
							]
						}
					],
					"sources": [
						{
							"fileName": "example/layout.x.ts",
							"line": 81,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 298,
					"name": "myConfig",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"children": [
						{
							"id": 299,
							"name": "Layout",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 301,
									"name": "content",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "example/layout.x.ts",
											"line": 15,
											"character": 15
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "reflection",
													"declaration": {
														"id": 302,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 303,
																"name": "Header",
																"kind": 2097152,
																"kindString": "Object literal",
																"flags": {},
																"children": [
																	{
																		"id": 304,
																		"name": "css",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/layout.x.ts",
																				"line": 16,
																				"character": 27
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		},
																		"defaultValue": "\".header\""
																	},
																	{
																		"id": 305,
																		"name": "title",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/layout.x.ts",
																				"line": 16,
																				"character": 44
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		},
																		"defaultValue": "\"Layout Example\""
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			304,
																			305
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "example/layout.x.ts",
																		"line": 16,
																		"character": 20
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "object"
																}
															}
														],
														"groups": [
															{
																"title": "Object literals",
																"kind": 2097152,
																"children": [
																	303
																]
															}
														]
													}
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 306,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"children": [
															{
																"id": 307,
																"name": "Main",
																"kind": 2097152,
																"kindString": "Object literal",
																"flags": {},
																"children": [
																	{
																		"id": 311,
																		"name": "content",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/layout.x.ts",
																				"line": 21,
																				"character": 23
																			}
																		],
																		"type": {
																			"type": "array",
																			"elementType": {
																				"type": "union",
																				"types": [
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 312,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"children": [
																								{
																									"id": 313,
																									"name": "Layout",
																									"kind": 2097152,
																									"kindString": "Object literal",
																									"flags": {},
																									"children": [
																										{
																											"id": 315,
																											"name": "content",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/layout.x.ts",
																													"line": 24,
																													"character": 31
																												}
																											],
																											"type": {
																												"type": "array",
																												"elementType": {
																													"type": "reflection",
																													"declaration": {
																														"id": 316,
																														"name": "__type",
																														"kind": 65536,
																														"kindString": "Type literal",
																														"flags": {},
																														"children": [
																															{
																																"id": 317,
																																"name": "aLeaf",
																																"kind": 2097152,
																																"kindString": "Object literal",
																																"flags": {},
																																"children": [
																																	{
																																		"id": 319,
																																		"name": "columns",
																																		"kind": 32,
																																		"kindString": "Variable",
																																		"flags": {},
																																		"sources": [
																																			{
																																				"fileName": "example/layout.x.ts",
																																				"line": 25,
																																				"character": 58
																																			}
																																		],
																																		"type": {
																																			"type": "array",
																																			"elementType": {
																																				"type": "intrinsic",
																																				"name": "string"
																																			}
																																		},
																																		"defaultValue": " [' ']"
																																	},
																																	{
																																		"id": 318,
																																		"name": "css",
																																		"kind": 32,
																																		"kindString": "Variable",
																																		"flags": {},
																																		"sources": [
																																			{
																																				"fileName": "example/layout.x.ts",
																																				"line": 25,
																																				"character": 42
																																			}
																																		],
																																		"type": {
																																			"type": "intrinsic",
																																			"name": "string"
																																		},
																																		"defaultValue": "\"leaf\""
																																	}
																																],
																																"groups": [
																																	{
																																		"title": "Variables",
																																		"kind": 32,
																																		"children": [
																																			319,
																																			318
																																		]
																																	}
																																],
																																"sources": [
																																	{
																																		"fileName": "example/layout.x.ts",
																																		"line": 25,
																																		"character": 35
																																	}
																																],
																																"type": {
																																	"type": "intrinsic",
																																	"name": "object"
																																}
																															}
																														],
																														"groups": [
																															{
																																"title": "Object literals",
																																"kind": 2097152,
																																"children": [
																																	317
																																]
																															}
																														]
																													}
																												}
																											},
																											"defaultValue": " [\n                            { aLeaf: { css:'leaf', columns: [' ']}},\n                            { aLeaf: { css:'leaf', columns: ['100px'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', '200px'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', 'fill'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', 'fill', '100px'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%', 'fill'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%', 'fill', '20%'] }}\n                        ]"
																										},
																										{
																											"id": 314,
																											"name": "rows",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/layout.x.ts",
																													"line": 23,
																													"character": 28
																												}
																											],
																											"type": {
																												"type": "array",
																												"elementType": {
																													"type": "intrinsic",
																													"name": "string"
																												}
																											},
																											"defaultValue": " ['']"
																										}
																									],
																									"groups": [
																										{
																											"title": "Variables",
																											"kind": 32,
																											"children": [
																												315,
																												314
																											]
																										}
																									],
																									"sources": [
																										{
																											"fileName": "example/layout.x.ts",
																											"line": 22,
																											"character": 28
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "object"
																									}
																								}
																							],
																							"groups": [
																								{
																									"title": "Object literals",
																									"kind": 2097152,
																									"children": [
																										313
																									]
																								}
																							]
																						}
																					},
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 320,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"children": [
																								{
																									"id": 321,
																									"name": "Layout",
																									"kind": 2097152,
																									"kindString": "Object literal",
																									"flags": {},
																									"children": [
																										{
																											"id": 322,
																											"name": "columns",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/layout.x.ts",
																													"line": 36,
																													"character": 31
																												}
																											],
																											"type": {
																												"type": "array",
																												"elementType": {
																													"type": "intrinsic",
																													"name": "string"
																												}
																											},
																											"defaultValue": " ['']"
																										},
																										{
																											"id": 323,
																											"name": "content",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/layout.x.ts",
																													"line": 37,
																													"character": 31
																												}
																											],
																											"type": {
																												"type": "array",
																												"elementType": {
																													"type": "reflection",
																													"declaration": {
																														"id": 324,
																														"name": "__type",
																														"kind": 65536,
																														"kindString": "Type literal",
																														"flags": {},
																														"children": [
																															{
																																"id": 325,
																																"name": "aLeaf",
																																"kind": 2097152,
																																"kindString": "Object literal",
																																"flags": {},
																																"children": [
																																	{
																																		"id": 326,
																																		"name": "css",
																																		"kind": 32,
																																		"kindString": "Variable",
																																		"flags": {},
																																		"sources": [
																																			{
																																				"fileName": "example/layout.x.ts",
																																				"line": 38,
																																				"character": 42
																																			}
																																		],
																																		"type": {
																																			"type": "intrinsic",
																																			"name": "string"
																																		},
																																		"defaultValue": "\"leaf\""
																																	},
																																	{
																																		"id": 327,
																																		"name": "rows",
																																		"kind": 32,
																																		"kindString": "Variable",
																																		"flags": {},
																																		"sources": [
																																			{
																																				"fileName": "example/layout.x.ts",
																																				"line": 38,
																																				"character": 55
																																			}
																																		],
																																		"type": {
																																			"type": "array",
																																			"elementType": {
																																				"type": "intrinsic",
																																				"name": "string"
																																			}
																																		},
																																		"defaultValue": " [' ']"
																																	}
																																],
																																"groups": [
																																	{
																																		"title": "Variables",
																																		"kind": 32,
																																		"children": [
																																			326,
																																			327
																																		]
																																	}
																																],
																																"sources": [
																																	{
																																		"fileName": "example/layout.x.ts",
																																		"line": 38,
																																		"character": 35
																																	}
																																],
																																"type": {
																																	"type": "intrinsic",
																																	"name": "object"
																																}
																															}
																														],
																														"groups": [
																															{
																																"title": "Object literals",
																																"kind": 2097152,
																																"children": [
																																	325
																																]
																															}
																														]
																													}
																												}
																											},
																											"defaultValue": " [\n                            { aLeaf: { css:'leaf', rows: [' ']}},\n                            { aLeaf: { css:'leaf', rows: ['100px'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', '200px'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', 'fill'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', 'fill', '100px'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%', 'fill'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%', 'fill', '20%'] }}\n                        ]"
																										}
																									],
																									"groups": [
																										{
																											"title": "Variables",
																											"kind": 32,
																											"children": [
																												322,
																												323
																											]
																										}
																									],
																									"sources": [
																										{
																											"fileName": "example/layout.x.ts",
																											"line": 35,
																											"character": 28
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "object"
																									}
																								}
																							],
																							"groups": [
																								{
																									"title": "Object literals",
																									"kind": 2097152,
																									"children": [
																										321
																									]
																								}
																							]
																						}
																					},
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 328,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"children": [
																								{
																									"id": 329,
																									"name": "Layout",
																									"kind": 2097152,
																									"kindString": "Object literal",
																									"flags": {},
																									"children": [
																										{
																											"id": 332,
																											"name": "content",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/layout.x.ts",
																													"line": 51,
																													"character": 31
																												}
																											],
																											"type": {
																												"type": "array",
																												"elementType": {
																													"type": "reflection",
																													"declaration": {
																														"id": 333,
																														"name": "__type",
																														"kind": 65536,
																														"kindString": "Type literal",
																														"flags": {},
																														"children": [
																															{
																																"id": 334,
																																"name": "aLeaf",
																																"kind": 2097152,
																																"kindString": "Object literal",
																																"flags": {},
																																"children": [
																																	{
																																		"id": 335,
																																		"name": "css",
																																		"kind": 32,
																																		"kindString": "Variable",
																																		"flags": {},
																																		"sources": [
																																			{
																																				"fileName": "example/layout.x.ts",
																																				"line": 52,
																																				"character": 42
																																			}
																																		],
																																		"type": {
																																			"type": "intrinsic",
																																			"name": "string"
																																		},
																																		"defaultValue": "\"leaf\""
																																	},
																																	{
																																		"id": 336,
																																		"name": "tiles",
																																		"kind": 32,
																																		"kindString": "Variable",
																																		"flags": {},
																																		"sources": [
																																			{
																																				"fileName": "example/layout.x.ts",
																																				"line": 52,
																																				"character": 56
																																			}
																																		],
																																		"type": {
																																			"type": "array",
																																			"elementType": {
																																				"type": "intrinsic",
																																				"name": "string"
																																			}
																																		},
																																		"defaultValue": " [' ']"
																																	}
																																],
																																"groups": [
																																	{
																																		"title": "Variables",
																																		"kind": 32,
																																		"children": [
																																			335,
																																			336
																																		]
																																	}
																																],
																																"sources": [
																																	{
																																		"fileName": "example/layout.x.ts",
																																		"line": 52,
																																		"character": 35
																																	}
																																],
																																"type": {
																																	"type": "intrinsic",
																																	"name": "object"
																																}
																															}
																														],
																														"groups": [
																															{
																																"title": "Object literals",
																																"kind": 2097152,
																																"children": [
																																	334
																																]
																															}
																														]
																													}
																												}
																											},
																											"defaultValue": " [\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%', 'fill']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%', '30%', 'fill']}},\n                        ]"
																										},
																										{
																											"id": 331,
																											"name": "css",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/layout.x.ts",
																													"line": 50,
																													"character": 27
																												}
																											],
																											"type": {
																												"type": "intrinsic",
																												"name": "string"
																											},
																											"defaultValue": "\"tile_pct\""
																										},
																										{
																											"id": 330,
																											"name": "tiles",
																											"kind": 32,
																											"kindString": "Variable",
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "example/layout.x.ts",
																													"line": 49,
																													"character": 29
																												}
																											],
																											"type": {
																												"type": "array",
																												"elementType": {
																													"type": "intrinsic",
																													"name": "string"
																												}
																											},
																											"defaultValue": " ['']"
																										}
																									],
																									"groups": [
																										{
																											"title": "Variables",
																											"kind": 32,
																											"children": [
																												332,
																												331,
																												330
																											]
																										}
																									],
																									"sources": [
																										{
																											"fileName": "example/layout.x.ts",
																											"line": 48,
																											"character": 28
																										}
																									],
																									"type": {
																										"type": "intrinsic",
																										"name": "object"
																									}
																								}
																							],
																							"groups": [
																								{
																									"title": "Object literals",
																									"kind": 2097152,
																									"children": [
																										329
																									]
																								}
																							]
																						}
																					}
																				]
																			}
																		},
																		"defaultValue": " [\n                    { Layout: {\n                        rows: [''],     // 1st tile: rows of varying columns\n                        content: [\n                            { aLeaf: { css:'leaf', columns: [' ']}},\n                            { aLeaf: { css:'leaf', columns: ['100px'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', '200px'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', 'fill'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', 'fill', '100px'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%', 'fill'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%', 'fill', '20%'] }}\n                        ]\n                    }},\n                    { Layout: {\n                        columns: [''],  // 2nd tile: columns of varying rows\n                        content: [\n                            { aLeaf: { css:'leaf', rows: [' ']}},\n                            { aLeaf: { css:'leaf', rows: ['100px'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', '200px'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', 'fill'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', 'fill', '100px'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%', 'fill'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%', 'fill', '20%'] }}\n                        ]\n                    }},\n                    { Layout: {\n                        tiles: [''],    // 3rd tile: varying tiles\n                        css: 'tile_pct',\n                        content: [\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%', 'fill']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%', '30%', 'fill']}},\n                        ]\n                    }},\n                    { Layout: {\n                        tiles: [''],    // 3rd tile: varying tiles\n                        css: 'tile_px',\n                        content: [\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                            { aLeaf: { css:'leaf', tiles: [' ', 'fill']}},\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                        ]\n                    }}\n                ]"
																	},
																	{
																		"id": 310,
																		"name": "leafCSS",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/layout.x.ts",
																				"line": 20,
																				"character": 23
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		},
																		"defaultValue": "\"leaf\""
																	},
																	{
																		"id": 309,
																		"name": "maxCount",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/layout.x.ts",
																				"line": 19,
																				"character": 24
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "number"
																		},
																		"defaultValue": "6"
																	},
																	{
																		"id": 308,
																		"name": "tiles",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "example/layout.x.ts",
																				"line": 18,
																				"character": 21
																			}
																		],
																		"type": {
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		"defaultValue": "  ['']"
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			311,
																			310,
																			309,
																			308
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "example/layout.x.ts",
																		"line": 17,
																		"character": 18
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "object"
																}
															}
														],
														"groups": [
															{
																"title": "Object literals",
																"kind": 2097152,
																"children": [
																	307
																]
															}
														]
													}
												}
											]
										}
									},
									"defaultValue": " [\n            { Header: { css:'.header', title: 'Layout Example'}},\n            { Main: {\n                tiles:  [''],           // main body wiull arrange in tiles\n                maxCount: 6,\n                leafCSS: 'leaf',\n                content: [\n                    { Layout: {\n                        rows: [''],     // 1st tile: rows of varying columns\n                        content: [\n                            { aLeaf: { css:'leaf', columns: [' ']}},\n                            { aLeaf: { css:'leaf', columns: ['100px'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', '200px'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', 'fill'] }},\n                            { aLeaf: { css:'leaf', columns: ['100px', 'fill', '100px'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%', 'fill'] }},\n                            { aLeaf: { css:'leaf', columns: ['20%', 'fill', '20%'] }}\n                        ]\n                    }},\n                    { Layout: {\n                        columns: [''],  // 2nd tile: columns of varying rows\n                        content: [\n                            { aLeaf: { css:'leaf', rows: [' ']}},\n                            { aLeaf: { css:'leaf', rows: ['100px'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', '200px'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', 'fill'] }},\n                            { aLeaf: { css:'leaf', rows: ['100px', 'fill', '100px'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%', 'fill'] }},\n                            { aLeaf: { css:'leaf', rows: ['20%', 'fill', '20%'] }}\n                        ]\n                    }},\n                    { Layout: {\n                        tiles: [''],    // 3rd tile: varying tiles\n                        css: 'tile_pct',\n                        content: [\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%', 'fill']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%']}},\n                            { aLeaf: { css:'leaf', tiles: ['40%', '30%', 'fill']}},\n                        ]\n                    }},\n                    { Layout: {\n                        tiles: [''],    // 3rd tile: varying tiles\n                        css: 'tile_px',\n                        content: [\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                            { aLeaf: { css:'leaf', tiles: [' ', 'fill']}},\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                            { aLeaf: { css:'leaf', tiles: [' ']}},\n                        ]\n                    }}\n                ]\n            }}\n        ]"
								},
								{
									"id": 300,
									"name": "rows",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "example/layout.x.ts",
											"line": 14,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": " ['40px', 'fill']"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										301,
										300
									]
								}
							],
							"sources": [
								{
									"fileName": "example/layout.x.ts",
									"line": 13,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								299
							]
						}
					],
					"sources": [
						{
							"fileName": "example/layout.x.ts",
							"line": 12,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						345
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						337
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						340,
						298
					]
				}
			],
			"sources": [
				{
					"fileName": "example/layout.x.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 346,
			"name": "\"example/start\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/example/start.ts",
			"sources": [
				{
					"fileName": "example/start.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 226,
			"name": "\"hsConfig\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/hsConfig.ts",
			"comment": {
				"shortText": "##HsConfig\nTool to configure a layout via a configuration object that is either defined\nas an object literal or as a JSON file.",
				"text": "The structure of the configuration object follows the convention\n<code>\n{\n<Class>: <Configuration>\n[,route: {\ndefault: '/api',\npaths: [\n'/api',\n'/api/:lib',\n'/api/:lib/:field'\n]\n}]\n}\n</code>\n`<Class>` is either {@link hsLayout:Layout.Layout Layout} or a subclass thereof.\n`<Configuration>` is an object literal `{ <Attr>:<Value>[, ...] }`\n\nArrays and Object Literals in `<Configuration>` define a layout tree that will be traversed,\nAfter which the tree will be instantiated by calling `m(<Class>, <Configuration>)`.\nMithril will then recursively create the Classes in the tree and call their `view` methods,\nwhere `Configuration`settings will be available via the `node.attrs` parameter.\n\nThe default `Layout` implementation recognizes the following special `<Attr>` keys:\n\n- `content`: the subcomponents to render in `Layout`, allowing for following `<Value>` types:\n    - `[{<Class>: <Configuration>}, ...]`\n    - `['string literal', ...]`\n    - `'string literal'`\n- `css`: the CSS class to set on `Layout`\n- `href`: a href attribute to set on `Layout`. This makes `Layout` clickable and sends the\nrespective attribute value to the Mithril router.\n- `onclick`: a function to call when `Layout` is clicked.\n"
			},
			"children": [
				{
					"id": 227,
					"name": "HsConfig",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interprets a configuration and either mounts it or routs it in `mithril`.\nExample:\n<code>\nimport * as mylib from './mylib';",
						"text": "const myConfig = {\nLayout: {\nrows:  ['50px', 'fill'],\ncss: '.hs-site',\ncontent: [{MyClass: {}}, 'bottom row']\n},\nroute: {\ndefault: '/api',\npaths: [\n'/api',             // defines `http://localhost/#!/api/\n'/api/:lib',        // defines `http://localhost/#!/api/foo\n'/api/:lib/:field'  // defines `http://localhost/#!/api/foo/bar\n]\n}\n}\n\nconst myExample = {\nMyClass: class extends Layout {\nview(node:Vnode) { return m('', 'myExample'); }\n}\n}\n\nnew HsConfig([mylib, myExample]).attachNodeTree(myConfig, document.body)\n</code>\n"
					},
					"children": [
						{
							"id": 228,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Constructs an HsConfig object on a `context`. Any class names encountered\nin the configuration tree when calling `attachNodeTree` will be resolved\nagainst this context. The `mithril`and `hsLayout` namespaces are automatically\nadded to the context."
							},
							"signatures": [
								{
									"id": 230,
									"name": "new HsConfig",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs an HsConfig object on a `context`. Any class names encountered\nin the configuration tree when calling `attachNodeTree` will be resolved\nagainst this context. The `mithril`and `hsLayout` namespaces are automatically\nadded to the context."
									},
									"parameters": [
										{
											"id": 231,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Array of namespaces againt which classes will be resolved.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HsConfig",
										"id": 227
									}
								}
							],
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 135,
									"character": 23
								}
							]
						},
						{
							"id": 229,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isProtected": true
							},
							"comment": {
								"shortText": "Array of namespaces againt which classes will be resolved.\n"
							},
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 143,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 232,
							"name": "attachNodeTree",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 233,
									"name": "attachNodeTree",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Interprets a configuration object and attaches it to a DOM element"
									},
									"parameters": [
										{
											"id": 234,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, or name of a JSON file, containing a configration tree"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 235,
											"name": "root",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a DOM element to which to attach the tree\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 150,
									"character": 18
								}
							]
						},
						{
							"id": 236,
							"name": "getContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 237,
									"name": "getContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 238,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 244,
									"character": 22
								}
							]
						},
						{
							"id": 239,
							"name": "load",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 240,
									"name": "load",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 241,
											"name": "file",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 248,
									"character": 16
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								228
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								229
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								232,
								236,
								239
							]
						}
					],
					"sources": [
						{
							"fileName": "hsConfig.ts",
							"line": 135,
							"character": 21
						}
					]
				},
				{
					"id": 242,
					"name": "copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 243,
							"name": "copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "creates a deep copy of the struct passed in."
							},
							"parameters": [
								{
									"id": 244,
									"name": "struct",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the object to copy\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "hsConfig.ts",
							"line": 48,
							"character": 13
						}
					]
				},
				{
					"id": 249,
					"name": "recurse",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 250,
							"name": "recurse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "recurses a configuration, trying to fetch the class definition for each element (key) in `config`.\nIf successful, it creates an object literal containing the component class and its attributes.\nIf unsuccessful, the element's value is returned unaltered so that it can be consumed\nby an instance further up in the recursion tree.",
								"returns": "an object literal representing the configuration, with Class names resolved\nagainst the provided `context`.\n"
							},
							"parameters": [
								{
									"id": 251,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an object literal containing a configuration subtree"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 252,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of objects against which to instantiate elements of `config`."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "hsConfig.ts",
							"line": 82,
							"character": 16
						}
					]
				},
				{
					"id": 245,
					"name": "resolve",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 246,
							"name": "resolve",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "resolves the symbol `sym` against the provided `context`.\nIf successful, returns the class definition for `sym`.",
								"returns": "the resolved Class, or `undefined`.\n"
							},
							"parameters": [
								{
									"id": 247,
									"name": "sym",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the symbol to resolve"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 248,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the context to resolve against; `mithril` and `hsLayout`\nare implicitely part of the context and need not be specified."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "hsConfig.ts",
							"line": 66,
							"character": 16
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						227
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						242,
						249,
						245
					]
				}
			],
			"sources": [
				{
					"fileName": "hsConfig.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 253,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/index.ts",
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"mithril\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/mithril.ts",
			"children": [
				{
					"id": 3,
					"name": "Vnode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "provide and export a Typescript Vnode type"
					},
					"sources": [
						{
							"fileName": "mithril.ts",
							"line": 21,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 2,
					"name": "m",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "import and re-export the mithril m objkect"
					},
					"sources": [
						{
							"fileName": "mithril.ts",
							"line": 16,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require(\"mithril\")"
				},
				{
					"id": 4,
					"name": "o",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "mithril.ts",
							"line": 23,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require(\"mithril/ospec/ospec\")"
				}
			],
			"groups": [
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2,
						4
					]
				}
			],
			"sources": [
				{
					"fileName": "mithril.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 347,
			"name": "\"overview\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/overview.ts",
			"comment": {
				"shortText": "# hsLayout\nhsLayout provides means to layout the browser window in various ways.\nSee [Layout Examples](example/layout.html)",
				"text": "## Concepts\n\n### Layouts\nLayouts can be either defined generically:\n```\nm(Layout, {\n    css: '.myLayoutClass',  // optional\n    columns: []\n    content: ['left', 'right']\n})\n```\nOr, for more complex cases, by defining a class that extends {@link Layout.Layout `Layout`}:\n```\nclass Columns extends Layout {\n    getComponents(node:Vnode) {\n        return [m(LeftColumn), m(CenterColumn), m(RightColumn)]\n    }\n}\nm(Columns);\n```\n\n### Layouters\nTo create new layout styles, define a class that extends the abstract {@link Layouter.Layouter `Layouter`} class.\nThis class should implement the `getStyles` method which calculates the styles attributes required for each `Component`\nto be layed out in a `Layout`.\n\nCurrently defined Layouters:\n- &nbsp; {@link PillaredLayouter.Columns `Columns`}\n- &nbsp; {@link PillaredLayouter.Rows    `Rows`}\n- &nbsp; {@link TileLayouter             `Tiles`}\n\n### Example\n<example>\n<file name='script.js'>\nconst theContent = ['Top row: 50px', 'Bottom row: remainder']\nm.mount(root, {view: () => m(hslayout.Layout, {\n    css: 'myColumn',\n    rows: [\"50px\", \"fill\"],\n    content:theContent\n    })\n});\n</file>\n<file name='style.css'>\n.myColumn .hs-layout {\n    border: 1px solid white;\n}\n</file>\n</example>\n\n### Nested Example\n<example>\n<file name='script.js'>\nm.mount(root, {view: () =>\n    m(hslayout.Layout, {\n        css: 'myColumn',\n        rows: [\"150px\", \"fill\"],\n        content:[\n            m(hslayout.Layout, {columns:['20%'], content:['top left', 'top 2nd']}),\n            m(hslayout.Layout, {columns:['20%'], content:['bottom left', 'bottom 2nd']})\n        ]\n    })\n});\n</file>\n<file name='style.css'>\n.myColumn .hs-layout {\n    border: 1px solid white;\n}\n</file>\n</example>\n"
			},
			"sources": [
				{
					"fileName": "overview.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 67,
			"name": "\"view/Layout\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/view/Layout.ts",
			"comment": {
				"shortText": "# Layout\nA `mithril` component class that layouts available space in the window.",
				"text": "### Invocation\ninvoked as `m(Layout, {name:<string>, content:Array<Vnode>})`\n\n### Attributes (node.attrs):\n- <key>:Array<String>, required. <key> matches a registered {@link Layouter Layouter}\n- content: Array<Vnode>, required. The Vnode children to lay out.\n- css:String, optional. The css specifier to use for this `Layout` component.\n- route: object literal holding parameters passed from `m.route`\n- href: String, optional. If present, makes the component clickable\n- onclick:(), optional. The function to call when clicked\n"
			},
			"children": [
				{
					"id": 68,
					"name": "Layout",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Base class for applying layouts. Subclasses should implement a {@link Layout.Layout.getComponents `getComponents`} method that returns\nthe components to render. The default implementation returns the conponents passed in `node.attrs.content`.\nOptionally, the subclass can also implement {@link Layout.Layout.getCSS `getCSS`} to provide the CSS class to\nassign to the component, and override the default implementation, which returns `node.attrs.css`.\n### Example:\n<code>\nimport { Layout, px, FILL }  from 'hslayout';\nconst TitleHeight   = px(30);\nconst FooterHeight  = px(10);\nclass MyLayout extends Layout {\ngetComponents(node:Vnode):Vnode {\nreturn this.layout('.my-layout', { rows:[TitleHeight, FILL, FooterHeight] }, [\nm(),\nm(),\nm()\n]);\n}\ngetCSS(node:Vnode):string {\n}\n}\n</code>"
					},
					"children": [
						{
							"id": 69,
							"name": "style",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"comment": {
								"shortText": "holds structural elements in style form: left, right, top, bottom, width, height"
							},
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 48,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 73,
							"name": "getCSS",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 74,
									"name": "getCSS",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called during the lifecycle `view` call to retrieve the css style class to apply to this container.\nThe default implementation returns components stored in `node.attrs.css`. This allows for\ncreating containers directly via mithril: `m(Layout, {content:[...], css:'.my-class'})`.\nOverride this method to create containers that return more sophisticated content."
									},
									"parameters": [
										{
											"id": 75,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Vnode",
												"id": 3
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 82,
									"character": 20
								}
							]
						},
						{
							"id": 70,
							"name": "getComponents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 71,
									"name": "getComponents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called during the lifecycle `view` call to retrieve the subcomponents to render in this container.\nThe default implementation returns components stored in `node.attrs.content`. This allows for\ncreating containers directly via mithril: `m(Layout, {content:[...]})`.\nIn case `node.attrs.content` is an array of literals with a `compClass` field describing a Component class,\nthe method will create a Mithril node on that class and pass the `node.attrs.route` argument down to it.",
										"text": "Override this method to create containers that return more sophisticated content.",
										"returns": "a String, a Vnode, or an array of Strings or Vnodes\n"
									},
									"parameters": [
										{
											"id": 72,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Vnode",
												"id": 3
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Vnode",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 64,
									"character": 27
								}
							]
						},
						{
							"id": 76,
							"name": "normalizeContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 77,
									"name": "normalizeContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 78,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Array",
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "Layout",
																		"id": 68
																	},
																	{
																		"type": "intrinsic",
																		"name": "string"
																	}
																]
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Vnode",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 87,
									"character": 28
								}
							]
						},
						{
							"id": 79,
							"name": "view",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 80,
									"name": "view",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "lays out the component in `components` according to the configuration in `attrs`.\nThe method returns a vnode container that has an associated `cssClass` style.\n`layout` is called during the `render` phase of the `mithril` lifecycle,\nwhich ensures an outside-in calling sequence on containers;\ni.e. the outermost containers are called first, and `node` will already have the\n`style` field set with required style attributes.\nThese are added to any `attrs` parameter provided.",
										"text": "The format for the layout configuration in `attrs` is <code>\n{<keyword>: <parameter>}\n</code>\nwhere `keyword` is the keyword with which the `Layouter` was registered.",
										"returns": "a vnode that has an associated `cssClass` style.\n"
									},
									"parameters": [
										{
											"id": 81,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Vnode",
												"id": 3
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Vnode",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 119,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								69
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								73,
								70,
								76,
								79
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Layout.ts",
							"line": 44,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						68
					]
				}
			],
			"sources": [
				{
					"fileName": "view/Layout.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 43,
			"name": "\"view/Layouter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/view/Layouter.ts",
			"comment": {
				"shortText": "Layouter.ts provides basic mechanisms for laying out a view container.\nSubclasses of `Layouter` should\n- implement the {@link Layouter.Layouter.getStyles getStyles} method.\n- register the subclass and configuration keyword with the static\n{@link Layouter.Layouter.register register} method."
			},
			"children": [
				{
					"id": 44,
					"name": "Layouter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Abstract base class for creating layout style implementations.\nSubclasses should implement `getStyles`. In addition, subclasses need to be registered with the\nstatic `Layouter.register` method.\n### Example\n<code>\nclass MyLayouter extends Layouter {\ncssClass = '.my-css-class';\nconstructor(public areaDesc:LayoutToken[]) {\nsuper(areaDesc);\n}",
						"text": "protected getStyles(components:Array<Vnode|Layout>):string {\ncomponents.map((c:Layout|Vnode, i:number) => {\nc.style = `width:auto; height:auto;\n});\nreturn this.cssClass;\n}\n}\n\nLayouter.register('MyLayouter', MyLayouter);\n</code>\n"
					},
					"children": [
						{
							"id": 60,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Layouter Constructor, will be called by the static `createLayout` method when creating the layout on a {@link hsLayout:Layout.Layout `Layout`}.\nThe `areaDesc` parameter is expected to be of the form {<keyword>: {@link hsLayout:Tokens.LayoutToken `LayoutToken`}[]}}\nand will be passed through form the `Layout` requesting the layout."
							},
							"signatures": [
								{
									"id": 62,
									"name": "new Layouter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Layouter Constructor, will be called by the static `createLayout` method when creating the layout on a {@link hsLayout:Layout.Layout `Layout`}.\nThe `areaDesc` parameter is expected to be of the form {<keyword>: {@link hsLayout:Tokens.LayoutToken `LayoutToken`}[]}}\nand will be passed through form the `Layout` requesting the layout."
									},
									"parameters": [
										{
											"id": 63,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 6
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Layouter",
										"id": 44
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 104,
									"character": 16
								}
							]
						},
						{
							"id": 61,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isPublic": true
							},
							"comment": {
								"shortText": "\n"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 112,
									"character": 31
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 6
								}
							}
						},
						{
							"id": 59,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 45,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 44,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 46,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 47,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 44,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												47
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 44,
											"character": 24
										}
									]
								}
							}
						},
						{
							"id": 64,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 65,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `style` field on the component itself.\nDuring rendering these `style` attributes are copied to the `node.attrs.styles` field.\n### Example\n<code>protected getStyles(components:Array<Vnode|Layout>):string {\ncomponents.map((c:Layout|Vnode, i:number) => {\nc.style = `width:auto; height:auto;\n});\nreturn this.cssClass;\n}\n</code>"
									},
									"parameters": [
										{
											"id": 66,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 68
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 128,
									"character": 32
								}
							]
						},
						{
							"id": 55,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 56,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 57,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 58,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode",
														"id": 3
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 90,
									"character": 30
								}
							]
						},
						{
							"id": 51,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 52,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```"
									},
									"parameters": [
										{
											"id": 53,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the keyword used in the attributes to `this.layout`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 54,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the `Layouter` implementation to instantiate when encountering `keyword`\n"
											},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 77,
									"character": 26
								}
							]
						},
						{
							"id": 48,
							"name": "translate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 49,
									"name": "translate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Translates `string` params to {@link hsLayout:Tokens.LayoutToken LayoutTokens}.\nThe `params` are expected to either\n- end in 'px'\n- end in '%'\n- be equal to 'fill' (case insensitive)"
									},
									"parameters": [
										{
											"id": 50,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an Array of strings that will be converted to an array of LayourTokens.\n\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "LayoutToken",
												"id": 6
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 55,
									"character": 28
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								60
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								61,
								59,
								45
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								64,
								55,
								51,
								48
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Layouter.ts",
							"line": 39,
							"character": 30
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "PillarLayouter",
							"id": 86
						},
						{
							"type": "reference",
							"name": "Tiles",
							"id": 190
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						44
					]
				}
			],
			"sources": [
				{
					"fileName": "view/Layouter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 82,
			"name": "\"view/PillaredLayouter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/view/PillaredLayouter.ts",
			"comment": {
				"shortText": "Lays out components in pillars, i.e. either {@link hsLayout:PillaredLayout.Columns columns}\nor {@link hsLayout:PillaredLayout.Rows rows}\nUse either of\n- `{rows: [attributes]}`\n- `{columns: [attributes]}`",
				"text": "to invoke this layout.\n\n### Example\n<code>\n{rows: [px(200), FILL]}   // --> top row has height 200px, all other rows evenly share remaining space\n{rows: [\"200px\", \"fill\"]} // --> equivalent description\n</code>\n\n## Attributes\nThe following values **v** are valid entries in The Attributes array:\n- **px(n)** or **\"<n>px\"** -- a fixed number of pixels\n- **pc(n)** or **\"<n>%\"**  -- a fixed percentage of available space\n- **FILL** or **\"fill\"**   -- a special constant to indicate - may appear only once per array.\n\nThe following options are supported for the Attributes array:\n- **[ ]**: An empty array; all components will be evenly spaced across the available width.\n- **[v]**: All components have the specified width (in px or %) and will fill the available space from the left,\nleaving any remaining unused space on the right.\n- **[v1, v2]**: All components have the specified widths (in px or %) and will fill the available space from the left,\nleaving any remaining unused space on the right. If there are more components than widths, the right-most width\nwill be used for the reminaing widgets.\n- **[v, FILL]**: Sets the first (left) widget to a width of `v`.<br>\nif `v` is specified in %, the remaining n-1 components will have equal relative widths of `(100-v)/(n-1)%`<br>\nif `v` is specified in px, the remaining n-1 components will have their right borders at location `i*100/n%`, with i=1...n.\n- **[FILL, v]**: Sets the last (right) widget to a width of `v`.<br>\nif `v` is specified in %, the remaining n-1 components will have equal relative widths of `(100-v)/(n-1)%`<br>\nif `v` is specified in px, the remaining n-1 components will have their left borders at location `i*100/n%`, with i=0...n-1.\n- **[va, FILL, vb]**: Sets the first and last widget to a width of `va`/`vb`.<br>\nBoth have to be specified either in px or in %.<br>\nif the unit is %, the remaining n-2 components will have equal relative widths of `(100-vb-va)/(n-2)%`<br>\nif the unit is px, the remaining n-2 components will have their left/right borders at location `i*100/n%`.\n- **[v1, v2, FILL, v3, v4]**: multiple widths can be specified in uninterrupted sequence both from the left and the right.\n"
			},
			"children": [
				{
					"id": 124,
					"name": "Columns",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Constructs a columns pillar layout style.<br>\nUse `{columns: [attributes]}` to invoke this layout. See top of page for a description.\n<example>\n<file name='script.js'>\nconst styles = [\n    [],                // equal spacing\n    [\"100px\"],         // fixed spacing\n    [\"60px\", \"100px\"], // fixed spacing, first one smaller\n    [\"100px\", \"fill\"], // first one fixed, rest equal\n    [\"fill\", \"100px\"], // last one fixed, rest equal\n    [\"20%\"],           // relative spacing, all equal\n    [\"20%\", \"fill\"],   // first relative, rest equal\n    [\"fill\", \"20%\"]    // last relative, rest equal\n];\nlet c = [];\nm.mount(root, {\n    view:() => m(hslayout.Layout, {\n        rows:[],  // each row a style\n        content: styles.map(i => m(hslayout.Layout, {\n            css: '.myExample',\n            content: c.map(c=>(''+i)), // the style descriptor\n            columns: i                 // a style from styles\n        }))\n    })\n});\nfunction next() {\n    if (c.length >= 5) { c = []; }\n    else { c.push(''); }\n    setTimeout(next, 2000);\n    m.redraw();\n}",
						"text": "next();\n</file>\n<file name='style.css'>\n.hs-row-layout>.myExample {\n    border-top:    1px solid white;\n    border-bottom: 1px solid white;\n}\n.myExample>.hs-layout {\n    border:    1px solid white;\n    background-color: #ccc;\n}\n.myExample {\n    color:       #a44;\n    font-weight: bold;\n    text-align:  center;\n}\n</file>\n</example>\n"
					},
					"children": [
						{
							"id": 125,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 127,
									"name": "new Columns",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 128,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 6
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Columns",
										"id": 124
									},
									"overwrites": {
										"type": "reference",
										"name": "PillarLayouter.__constructor",
										"id": 95
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 283,
									"character": 38
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "PillarLayouter.__constructor",
								"id": 95
							}
						},
						{
							"id": 126,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 284,
									"character": 31
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 6
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "PillarLayouter.areaDesc",
								"id": 96
							}
						},
						{
							"id": 136,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 91,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.cssClass",
								"id": 94
							}
						},
						{
							"id": 135,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 90,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.fields",
								"id": 93
							}
						},
						{
							"id": 129,
							"name": "firstFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 87,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.firstFixed",
								"id": 87
							}
						},
						{
							"id": 130,
							"name": "lastFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 88,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.lastFixed",
								"id": 88
							}
						},
						{
							"id": 151,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.spacing",
								"id": 59
							}
						},
						{
							"id": 131,
							"name": "unit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 89,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 132,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 133,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 134,
													"name": "num",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "descriptor",
													"id": 184
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 89,
											"character": 9
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.unit",
								"id": 89
							}
						},
						{
							"id": 140,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 44,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 141,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 142,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 44,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												142
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 44,
											"character": 24
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.layoutStyles",
								"id": 45
							}
						},
						{
							"id": 137,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 138,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `styles` field on the component itself.\nDuring rendering these `styles` attributes are copied to the `node.attrs.styles` field."
									},
									"parameters": [
										{
											"id": 139,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 68
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.getStyles",
										"id": 64
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "PillarLayouter.getStyles",
										"id": 109
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 220,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.getStyles",
								"id": 64
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.getStyles",
								"id": 109
							}
						},
						{
							"id": 147,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 148,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 149,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 150,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode",
														"id": 3
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.createLayout",
										"id": 55
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 90,
									"character": 30
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.createLayout",
								"id": 55
							}
						},
						{
							"id": 143,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 144,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```"
									},
									"parameters": [
										{
											"id": 145,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the keyword used in the attributes to `this.layout`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 146,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the `Layouter` implementation to instantiate when encountering `keyword`\n"
											},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.register",
										"id": 51
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 77,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.register",
								"id": 51
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								125
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								126,
								136,
								135,
								129,
								130,
								151,
								131,
								140
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								137,
								147,
								143
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 283,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "PillarLayouter",
							"id": 86
						}
					]
				},
				{
					"id": 86,
					"name": "PillarLayouter",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Abstract base Layouter for creating PillarLayouter (rows, colums)"
					},
					"children": [
						{
							"id": 95,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {
								"shortText": "Constructs a Pillared layout (rows or columns).\nDetermines the `unit` (% or px) from the passed area descriptors"
							},
							"signatures": [
								{
									"id": 97,
									"name": "new PillarLayouter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs a Pillared layout (rows or columns).\nDetermines the `unit` (% or px) from the passed area descriptors"
									},
									"parameters": [
										{
											"id": 98,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Style params for either rows or columns layout"
											},
											"type": {
												"type": "reference",
												"name": "PillarParams",
												"id": 83
											}
										},
										{
											"id": 99,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Description of the requested layout\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 6
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PillarLayouter",
										"id": 86
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.__constructor",
										"id": 60
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 91,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.__constructor",
								"id": 60
							}
						},
						{
							"id": 96,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isPublic": true
							},
							"comment": {
								"shortText": "Description of the requested layout\n"
							},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 99,
									"character": 52
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 6
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "Layouter.areaDesc",
								"id": 61
							}
						},
						{
							"id": 94,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 91,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 93,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 90,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 87,
							"name": "firstFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 87,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 88,
							"name": "lastFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 88,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 123,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.spacing",
								"id": 59
							}
						},
						{
							"id": 89,
							"name": "unit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 89,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 90,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 91,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 92,
													"name": "num",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "descriptor",
													"id": 184
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 89,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 112,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 44,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 113,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 114,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 44,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												114
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 44,
											"character": 24
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.layoutStyles",
								"id": 45
							}
						},
						{
							"id": 100,
							"name": "getSizes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 101,
									"name": "getSizes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an iterable list of size descriptors, one for each area to be layed out.\nEach descriptor",
										"returns": "Iterable list of `num` size descriptors, one for each area to be layed out\n"
									},
									"parameters": [
										{
											"id": 102,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the number of areas to be layed out"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "descriptor",
											"id": 184
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 130,
									"character": 20
								}
							]
						},
						{
							"id": 109,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 110,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `styles` field on the component itself.\nDuring rendering these `styles` attributes are copied to the `node.attrs.styles` field."
									},
									"parameters": [
										{
											"id": 111,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 68
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.getStyles",
										"id": 64
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 220,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.getStyles",
								"id": 64
							}
						},
						{
							"id": 103,
							"name": "unitPercent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 104,
									"name": "unitPercent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 105,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "descriptor",
											"id": 184
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 146,
									"character": 23
								}
							]
						},
						{
							"id": 106,
							"name": "unitPixel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 107,
									"name": "unitPixel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 108,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "descriptor",
											"id": 184
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 172,
									"character": 21
								}
							]
						},
						{
							"id": 119,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 120,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 121,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 122,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode",
														"id": 3
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.createLayout",
										"id": 55
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 90,
									"character": 30
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.createLayout",
								"id": 55
							}
						},
						{
							"id": 115,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 116,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```"
									},
									"parameters": [
										{
											"id": 117,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the keyword used in the attributes to `this.layout`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 118,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the `Layouter` implementation to instantiate when encountering `keyword`\n"
											},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.register",
										"id": 51
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 77,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.register",
								"id": 51
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								95
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								96,
								94,
								93,
								87,
								88,
								123,
								89,
								112
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								100,
								109,
								103,
								106,
								119,
								115
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 86,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Layouter",
							"id": 44
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Columns",
							"id": 124
						},
						{
							"type": "reference",
							"name": "Rows",
							"id": 152
						}
					]
				},
				{
					"id": 152,
					"name": "Rows",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Constructs a row pillar layout style.<br>\nUse `{row: [attributes]}` to invoke this layout. See top of page for a description.\n<example>\n<file name='script.js'>\nconst styles = [\n    [],                // equal spacing\n    [\"100px\"],         // fixed spacing\n    [\"60px\", \"100px\"], // fixed spacing, first one smaller\n    [\"100px\", \"fill\"], // first one fixed, rest equal\n    [\"fill\", \"100px\"], // last one fixed, rest equal\n    [\"20%\"],           // relative spacing, all equal\n    [\"20%\", \"fill\"],   // first relative, rest equal\n    [\"fill\", \"20%\"]    // last relative, rest equal\n];\nlet c = [];\nfunction next() {\n    if (c.length >= 5) { c = []; }\n    else { c.push(''); }\n    setTimeout(next, 2000);\n    m.redraw();\n}",
						"text": "m.mount(root, {\n    view:() => m(hslayout.Layout, {\n        columns:[],  // each column a style\n        content: styles.map(i => m(hslayout.Layout, {\n            css: '.myExample',\n            content: c.map(c=>(''+i)),\n            rows: i   // a style from styles\n        }))\n    })\n});\nnext();\n</file>\n<file name='style.css'>\n.hs-column-layout>.myExample {\n    border-left:  1px solid white;\n    border-right: 1px solid white;\n}\n.myExample>.hs-layout {\n    border:    1px solid white;\n    background-color: #ccc;\n}\n.myExample {\n    color:       #a44;\n    font-weight: bold;\n    text-align:  center;\n}\n</file>\n</example>\n"
					},
					"children": [
						{
							"id": 153,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 155,
									"name": "new Rows",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 156,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 6
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Rows",
										"id": 152
									},
									"overwrites": {
										"type": "reference",
										"name": "PillarLayouter.__constructor",
										"id": 95
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 339,
									"character": 35
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "PillarLayouter.__constructor",
								"id": 95
							}
						},
						{
							"id": 154,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 340,
									"character": 31
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 6
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "PillarLayouter.areaDesc",
								"id": 96
							}
						},
						{
							"id": 164,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 91,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.cssClass",
								"id": 94
							}
						},
						{
							"id": 163,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 90,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.fields",
								"id": 93
							}
						},
						{
							"id": 157,
							"name": "firstFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 87,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.firstFixed",
								"id": 87
							}
						},
						{
							"id": 158,
							"name": "lastFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 88,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.lastFixed",
								"id": 88
							}
						},
						{
							"id": 179,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.spacing",
								"id": 59
							}
						},
						{
							"id": 159,
							"name": "unit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 89,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 160,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 161,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 162,
													"name": "num",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "descriptor",
													"id": 184
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 89,
											"character": 9
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.unit",
								"id": 89
							}
						},
						{
							"id": 168,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 44,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 169,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 170,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 44,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												170
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 44,
											"character": 24
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.layoutStyles",
								"id": 45
							}
						},
						{
							"id": 165,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 166,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `styles` field on the component itself.\nDuring rendering these `styles` attributes are copied to the `node.attrs.styles` field."
									},
									"parameters": [
										{
											"id": 167,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 68
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.getStyles",
										"id": 64
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "PillarLayouter.getStyles",
										"id": 109
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 220,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.getStyles",
								"id": 64
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.getStyles",
								"id": 109
							}
						},
						{
							"id": 175,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 176,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 177,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 178,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode",
														"id": 3
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.createLayout",
										"id": 55
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 90,
									"character": 30
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.createLayout",
								"id": 55
							}
						},
						{
							"id": 171,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 172,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```"
									},
									"parameters": [
										{
											"id": 173,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the keyword used in the attributes to `this.layout`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 174,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the `Layouter` implementation to instantiate when encountering `keyword`\n"
											},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.register",
										"id": 51
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 77,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.register",
								"id": 51
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								153
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								154,
								164,
								163,
								157,
								158,
								179,
								159,
								168
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								165,
								175,
								171
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 339,
							"character": 10
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "PillarLayouter",
							"id": 86
						}
					]
				},
				{
					"id": 83,
					"name": "PillarParams",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "interface definition for entries in `cParams`"
					},
					"children": [
						{
							"id": 84,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 56,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 85,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 57,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								84,
								85
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 55,
							"character": 22
						}
					]
				},
				{
					"id": 184,
					"name": "descriptor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 81,
							"character": 15
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 185,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 187,
									"name": "code",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 81,
											"character": 36
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 188,
									"name": "fields",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 81,
											"character": 51
										}
									],
									"type": {
										"type": "reference",
										"name": "__type"
									}
								},
								{
									"id": 186,
									"name": "size",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 81,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										187,
										188,
										186
									]
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 81,
									"character": 17
								}
							]
						}
					}
				},
				{
					"id": 180,
					"name": "PillarLayouts",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "array of trigger keywords for column and row layout styles"
					},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 63,
							"character": 26
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n    'columns', 'rows'\n]"
				},
				{
					"id": 181,
					"name": "cParams",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"comment": {
						"shortText": "contains style settings for the row and column layout"
					},
					"children": [
						{
							"id": 182,
							"name": "columns",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 71,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "PillarParams",
								"id": 83
							},
							"defaultValue": " <PillarParams>{\n        cssClass: '.hs-column-layout',\n        fields: ['top', 'bottom', 'left', 'right', 'height', 'width']\n    }"
						},
						{
							"id": 183,
							"name": "rows",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 75,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "PillarParams",
								"id": 83
							},
							"defaultValue": " <PillarParams>{\n        cssClass: '.hs-row-layout',\n        fields: ['left', 'right', 'top', 'bottom', 'width', 'height']\n    }"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								182,
								183
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 70,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						124,
						86,
						152
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						83
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						184
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						180
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						181
					]
				}
			],
			"sources": [
				{
					"fileName": "view/PillaredLayouter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 348,
			"name": "\"view/PillaredLayouter.spec\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/view/PillaredLayouter.spec.ts",
			"children": [
				{
					"id": 352,
					"name": "columns",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.spec.ts",
							"line": 7,
							"character": 13
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\"150px\", \"fill\"]"
				},
				{
					"id": 349,
					"name": "hslayout",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.spec.ts",
							"line": 2,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('../src/')"
				},
				{
					"id": 350,
					"name": "m",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.spec.ts",
							"line": 3,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " hslayout.m"
				},
				{
					"id": 351,
					"name": "o",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.spec.ts",
							"line": 4,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " hslayout.o"
				},
				{
					"id": 353,
					"name": "titles",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.spec.ts",
							"line": 8,
							"character": 12
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " ['Left Column: 150px', 'Right Column: remainder']"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						352,
						349,
						350,
						351,
						353
					]
				}
			],
			"sources": [
				{
					"fileName": "view/PillaredLayouter.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 189,
			"name": "\"view/TileLayouter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/view/TileLayouter.ts",
			"comment": {
				"shortText": "Lays out components in tiles\nUse\n- `{tiles: [attributes]}`",
				"text": "to invoke this layout.\n\n### Example\n<code>\n{tiles: [\"20%\"]}   // --> tiles will all have 20% of available height and width\n</code>\n<example>\n<file name='script.js'>\nlet c = [1,2,3,4,5];\n\nm.mount(root, {\n    view:() => m(hslayout.Layout, {\n        tiles:[],\n        content: c.map((c,i)=>(''+i)),\n        css: '.myExample'\n    })\n});\n\nfunction next() {\n    if (c.length >= 9) { c = []; }\n    else { c.push(''); }\n    setTimeout(next, 2000);\n    m.redraw();\n}\nnext();\n</file>\n<file name='style.css'>\n.myExample .hs-layout {\n    border: 1px solid white;\n    background-color: #ccc;\n    color:       #a44;\n    text-align:  center;\n}\n</file>\n</example>\n\n## Attributes\nThe following values **v** are valid entries in The Attributes array:\n- **px(n)** or **\"_n_ px\"** -- a fixed number of pixels\n- **pc(n)** or **\"_n_ %\"**  -- a fixed percentage of available space\n- **FILL** or **\"fill\"**   -- a special constant indicate to fill remaining space - may appear only once per array.\n\nThe following options are supported for the Attributes array:\n- **[ ]**: An empty array; The available tiles will cover the entire width and height.\nTheir size will adapt as tiles are added.\n- **[FILL]**: like [ ], except the last tile fills the available space.\n- **[v]**: All components have the specified width and height (in px or %) and will fill the available space from the left,\nleaving any remaining unused space on the right.\n- **[w, h]**: All components have the specified width w and height h (in px or %) and will fill the available space from the left,\nleaving any remaining unused space on the right.\n- **[v, FILL]**: like [v], except that the last tile in each row will fill the remaining available width\nand the tiles in the bottom row will fill the remaining height\n- **[w, h, FILL]**: like [w, h], except that the last tile will fill the remaining available width.\n"
			},
			"children": [
				{
					"id": 190,
					"name": "Tiles",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {},
					"children": [
						{
							"id": 193,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {
								"shortText": "Constructs a Tileds layout"
							},
							"signatures": [
								{
									"id": 195,
									"name": "new Tiles",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs a Tileds layout"
									},
									"parameters": [
										{
											"id": 196,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Description of the requested layout\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 6
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Tiles",
										"id": 190
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.__constructor",
										"id": 60
									}
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 75,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.__constructor",
								"id": 60
							}
						},
						{
							"id": 194,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isPublic": true
							},
							"comment": {
								"shortText": "Description of the requested layout\n"
							},
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 81,
									"character": 31
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 6
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "Layouter.areaDesc",
								"id": 61
							}
						},
						{
							"id": 191,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 74,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 217,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 104,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.spacing",
								"id": 59
							}
						},
						{
							"id": 192,
							"name": "unit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 75,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 206,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 44,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 207,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 208,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 44,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												208
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 44,
											"character": 24
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.layoutStyles",
								"id": 45
							}
						},
						{
							"id": 203,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 204,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `styles` field on the component itself.\nDuring rendering these `styles` attributes are copied to the `node.attrs.styles` field."
									},
									"parameters": [
										{
											"id": 205,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 68
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.getStyles",
										"id": 64
									}
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 155,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.getStyles",
								"id": 64
							}
						},
						{
							"id": 197,
							"name": "unitPercent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 198,
									"name": "unitPercent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 199,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 89,
									"character": 23
								}
							]
						},
						{
							"id": 200,
							"name": "unitPixel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 201,
									"name": "unitPixel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 202,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 120,
									"character": 21
								}
							]
						},
						{
							"id": 213,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 214,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 215,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 216,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode",
														"id": 3
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.createLayout",
										"id": 55
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 90,
									"character": 30
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.createLayout",
								"id": 55
							}
						},
						{
							"id": 209,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 210,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```"
									},
									"parameters": [
										{
											"id": 211,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the keyword used in the attributes to `this.layout`"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 212,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the `Layouter` implementation to instantiate when encountering `keyword`\n"
											},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 44
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.register",
										"id": 51
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 77,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.register",
								"id": 51
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								193
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								194,
								191,
								217,
								192,
								206
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								203,
								197,
								200,
								213,
								209
							]
						}
					],
					"sources": [
						{
							"fileName": "view/TileLayouter.ts",
							"line": 73,
							"character": 11
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Layouter",
							"id": 44
						}
					]
				},
				{
					"id": 218,
					"name": "descriptor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "view/TileLayouter.ts",
							"line": 69,
							"character": 15
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 219,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 223,
									"name": "bottom",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 69,
											"character": 64
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 225,
									"name": "height",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 69,
											"character": 93
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 221,
									"name": "left",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 69,
											"character": 35
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 222,
									"name": "right",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 69,
											"character": 49
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 220,
									"name": "top",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 69,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 224,
									"name": "width",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 69,
											"character": 78
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										223,
										225,
										221,
										222,
										220,
										224
									]
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 69,
									"character": 17
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						190
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						218
					]
				}
			],
			"sources": [
				{
					"fileName": "view/TileLayouter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 5,
			"name": "\"view/Tokens\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/mithril/hsLayout/src/view/Tokens.ts",
			"comment": {
				"shortText": "## Layout Tokens\nUsed to specify layout sizes"
			},
			"children": [
				{
					"id": 13,
					"name": "DefinedToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A layout token that is defined in size."
					},
					"children": [
						{
							"id": 14,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 15,
									"name": "new DefinedToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 16,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DefinedToken",
										"id": 13
									},
									"overwrites": {
										"type": "reference",
										"name": "LayoutToken.__constructor",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 17,
									"character": 55
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "LayoutToken.__constructor",
								"id": 7
							}
						},
						{
							"id": 17,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 18,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "LayoutToken.getSize",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "LayoutToken.getSize",
								"id": 11
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								14
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								17
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 17,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "LayoutToken",
							"id": 6
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "PixelToken",
							"id": 24
						},
						{
							"type": "reference",
							"name": "PercentToken",
							"id": 30
						}
					]
				},
				{
					"id": 19,
					"name": "FillToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A layout token that is undefined in size, and that fill will     the available space."
					},
					"children": [
						{
							"id": 20,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 21,
									"name": "new FillToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FillToken",
										"id": 19
									},
									"overwrites": {
										"type": "reference",
										"name": "LayoutToken.__constructor",
										"id": 7
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 24,
									"character": 44
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "LayoutToken.__constructor",
								"id": 7
							}
						},
						{
							"id": 22,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 23,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "LayoutToken.getSize",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "LayoutToken.getSize",
								"id": 11
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								20
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								22
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 24,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "LayoutToken",
							"id": 6
						}
					]
				},
				{
					"id": 6,
					"name": "LayoutToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Abstract token for a layout area. It is defined by a single number available via the constructor."
					},
					"children": [
						{
							"id": 7,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 9,
									"name": "new LayoutToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 10,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LayoutToken",
										"id": 6
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 9,
									"character": 35
								}
							]
						},
						{
							"id": 8,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 10,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 11,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 12,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								7
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								8
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								11
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 9,
							"character": 33
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "DefinedToken",
							"id": 13
						},
						{
							"type": "reference",
							"name": "FillToken",
							"id": 19
						}
					]
				},
				{
					"id": 30,
					"name": "PercentToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A defined token that sets a size in percent of available space."
					},
					"children": [
						{
							"id": 31,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 32,
									"name": "new PercentToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 33,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PercentToken",
										"id": 30
									},
									"overwrites": {
										"type": "reference",
										"name": "DefinedToken.__constructor",
										"id": 14
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 38,
									"character": 48
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "DefinedToken.__constructor",
								"id": 14
							}
						},
						{
							"id": 34,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 35,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "LayoutToken.getSize",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "LayoutToken.getSize",
								"id": 11
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								31
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								34
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 38,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "DefinedToken",
							"id": 13
						}
					]
				},
				{
					"id": 24,
					"name": "PixelToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A defined token that sets a size in pixel."
					},
					"children": [
						{
							"id": 25,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 26,
									"name": "new PixelToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 27,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PixelToken",
										"id": 24
									},
									"overwrites": {
										"type": "reference",
										"name": "DefinedToken.__constructor",
										"id": 14
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 31,
									"character": 46
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "DefinedToken.__constructor",
								"id": 14
							}
						},
						{
							"id": 28,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 29,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "LayoutToken.getSize",
										"id": 11
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "LayoutToken.getSize",
								"id": 11
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								25
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								28
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 31,
							"character": 23
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "DefinedToken",
							"id": 13
						}
					]
				},
				{
					"id": 42,
					"name": "FILL",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Convenience constant, standing for an undefined fill token."
					},
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 57,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "FillToken",
						"id": 19
					},
					"defaultValue": " new FillToken()"
				},
				{
					"id": 39,
					"name": "pc",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 40,
							"name": "pc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A convenience function that returns a defined percent-sized token"
							},
							"parameters": [
								{
									"id": 41,
									"name": "pc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the percentage in the token\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "PercentToken",
								"id": 30
							}
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 52,
							"character": 18
						}
					]
				},
				{
					"id": 36,
					"name": "px",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 37,
							"name": "px",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A convenience function that returns a defined pixel-sized token"
							},
							"parameters": [
								{
									"id": 38,
									"name": "px",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the number of pixels in the token\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "PixelToken",
								"id": 24
							}
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 46,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						13,
						19,
						6,
						30,
						24
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						42
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						39,
						36
					]
				}
			],
			"sources": [
				{
					"fileName": "view/Tokens.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				254,
				297,
				346,
				226,
				253,
				1,
				347,
				67,
				43,
				82,
				348,
				189,
				5
			]
		}
	]
}