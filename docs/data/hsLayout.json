{
	"id": 0,
	"name": "hsLayout",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 226,
			"name": "\"hsConfig\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/hsConfig.ts",
			"comment": {
				"shortText": "##HsConfig\nTool to configure a layout via a configuration object that is either defined\nas an object literal or as a JSON file.",
				"text": "The structure of the configuration object follows the convention\n<code>\n{\n<Class>: <Configuration>\n[,route: {\ndefault: '/api',\npaths: [\n'/api',\n'/api/:lib',\n'/api/:lib/:field'\n]\n}]\n}\n</code>\n`<Class>` is either {@link hsLayout:Layout.Layout Layout} or a subclass thereof.\n`<Configuration>` is an object literal `{ <Attr>:<Value>[, ...] }`\n\nArrays and Object Literals in `<Configuration>` define a layout tree that will be traversed,\nAfter which the tree will be instantiated by calling `m(<Class>, <Configuration>)`.\nMithril will then recursively create the Classes in the tree and call their `view` methods,\nwhere `Configuration`settings will be available via the `node.attrs` parameter.\n\nThe default `Layout` implementation recognizes the following special `<Attr>` keys:\n\n- `content`: the subcomponents to render in `Layout`, allowing for following `<Value>` types:\n    - `[{<Class>: <Configuration>}, ...]`\n    - `['string literal', ...]`\n    - `'string literal'`\n- `css`: the CSS class to set on `Layout`\n- `href`: a href attribute to set on `Layout`. This makes `Layout` clickable and sends the\nrespective attribute value to the Mithril router.\n- `onclick`: a function to call when `Layout` is clicked.\n"
			},
			"children": [
				{
					"id": 227,
					"name": "HsConfig",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Interprets a configuration and either mounts it or routs it in `mithril`.\nExample:\n<code>\nimport * as mylib from './mylib';",
						"text": "const myConfig = {\nLayout: {\nrows:  ['50px', 'fill'],\ncss: '.hs-site',\ncontent: [{MyClass: {}}, 'bottom row']\n},\nroute: {\ndefault: '/api',\npaths: [\n'/api',             // defines `http://localhost/#!/api/\n'/api/:lib',        // defines `http://localhost/#!/api/foo\n'/api/:lib/:field'  // defines `http://localhost/#!/api/foo/bar\n]\n}\n}\n\nconst myExample = {\nMyClass: class extends Layout {\nview(node:Vnode) { return m('', 'myExample'); }\n}\n}\n\nnew HsConfig([mylib, myExample]).attachNodeTree(myConfig, document.body)\n</code>\n"
					},
					"children": [
						{
							"id": 228,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Constructs an HsConfig object on a `context`. Any class names encountered\nin the configuration tree when calling `attachNodeTree` will be resolved\nagainst this context. The `mithril`and `hsLayout` namespaces are automatically\nadded to the context."
							},
							"signatures": [
								{
									"id": 230,
									"name": "new HsConfig",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs an HsConfig object on a `context`. Any class names encountered\nin the configuration tree when calling `attachNodeTree` will be resolved\nagainst this context. The `mithril`and `hsLayout` namespaces are automatically\nadded to the context."
									},
									"parameters": [
										{
											"id": 231,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Array of namespaces againt which classes will be resolved.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HsConfig",
										"id": 227
									}
								}
							],
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 135,
									"character": 23
								}
							]
						},
						{
							"id": 229,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isProtected": true
							},
							"comment": {
								"shortText": "Array of namespaces againt which classes will be resolved.\n"
							},
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 143,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 232,
							"name": "attachNodeTree",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 233,
									"name": "attachNodeTree",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Interprets a configuration object and attaches it to a DOM element"
									},
									"parameters": [
										{
											"id": 234,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, or name of a JSON file, containing a configration tree"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 235,
											"name": "root",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "a DOM element to which to attach the tree\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 150,
									"character": 18
								}
							]
						},
						{
							"id": 236,
							"name": "getContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 237,
									"name": "getContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 238,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 244,
									"character": 22
								}
							]
						},
						{
							"id": 239,
							"name": "load",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 240,
									"name": "load",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 241,
											"name": "file",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "hsConfig.ts",
									"line": 248,
									"character": 16
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								228
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								229
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								232,
								236,
								239
							]
						}
					],
					"sources": [
						{
							"fileName": "hsConfig.ts",
							"line": 135,
							"character": 21
						}
					]
				},
				{
					"id": 242,
					"name": "copy",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 243,
							"name": "copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "creates a deep copy of the struct passed in."
							},
							"parameters": [
								{
									"id": 244,
									"name": "struct",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the object to copy\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "hsConfig.ts",
							"line": 48,
							"character": 13
						}
					]
				},
				{
					"id": 249,
					"name": "recurse",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 250,
							"name": "recurse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "recurses a configuration, trying to fetch the class definition for each element (key) in `config`.\nIf successful, it creates an object literal containing the component class and its attributes.\nIf unsuccessful, the element's value is returned unaltered so that it can be consumed\nby an instance further up in the recursion tree.",
								"returns": "an object literal representing the configuration, with Class names resolved\nagainst the provided `context`.\n"
							},
							"parameters": [
								{
									"id": 251,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an object literal containing a configuration subtree"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 252,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "an array of objects against which to instantiate elements of `config`."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "hsConfig.ts",
							"line": 82,
							"character": 16
						}
					]
				},
				{
					"id": 245,
					"name": "resolve",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 246,
							"name": "resolve",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "resolves the symbol `sym` against the provided `context`.\nIf successful, returns the class definition for `sym`.",
								"returns": "the resolved Class, or `undefined`.\n"
							},
							"parameters": [
								{
									"id": 247,
									"name": "sym",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the symbol to resolve"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 248,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the context to resolve against; `mithril` and `hsLayout`\nare implicitely part of the context and need not be specified."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "hsConfig.ts",
							"line": 66,
							"character": 16
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						227
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						242,
						249,
						245
					]
				}
			],
			"sources": [
				{
					"fileName": "hsConfig.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 225,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/index.ts",
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"mithril\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/mithril.ts",
			"comment": {
				"shortText": "translates mithril libraries to an ES6 module and provides some Typescript type shortcuts."
			},
			"children": [
				{
					"id": 3,
					"name": "Vnode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "provide and export a Typescript Vnode type"
					},
					"sources": [
						{
							"fileName": "mithril.ts",
							"line": 14,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 2,
					"name": "m",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "import and re-export the mithril m objkect"
					},
					"sources": [
						{
							"fileName": "mithril.ts",
							"line": 9,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require(\"mithril\")"
				}
			],
			"groups": [
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "mithril.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 253,
			"name": "\"overview\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/overview.ts",
			"comment": {
				"shortText": "# hsLayout",
				"text": "Helpful Scripts UI layout tools.\n[`[Github page]`](https://github.com/HelpfulScripts/hsLayout)\n[`[Coverage Info]`](./data/src/hsLayout/coverage/)\n___\n\nhsLayout provides means to layout the browser window in various ways.\nSee [Layout Examples](example/layout.html)\n\n## Concepts\n\n### Layouts\nLayouts can be either defined generically:\n```\nm(Layout, {\n    css: '.myLayoutClass',  // optional\n    columns: []\n    content: ['left', 'right']\n})\n```\nOr, for more complex cases, by defining a class that extends {@link Layout.Layout `Layout`}:\n```\nclass Columns extends Layout {\n    getComponents(node:Vnode) {\n        return [m(LeftColumn), m(CenterColumn), m(RightColumn)]\n    }\n}\nm(Columns);\n```\n\n### Layouters\nTo create new layout styles, define a class that extends the abstract {@link Layouter.Layouter `Layouter`} class.\nThis class should implement the `getStyles` method which calculates the styles attributes required for each `Component`\nto be layed out in a `Layout`.\n\nCurrently defined Layouters:\n- &nbsp; {@link PillaredLayouter.Columns `Columns`}\n- &nbsp; {@link PillaredLayouter.Rows    `Rows`}\n- &nbsp; {@link TileLayouter             `Tiles`}\n\n### Example\n<example>\n<file name='script.js'>\nconst theContent = ['Top row: 50px', 'Bottom row: remainder']\nm.mount(root, {view: () => m(hslayout.Layout, {\n    css: 'myColumn',\n    rows: [\"50px\", \"fill\"],\n    content:theContent\n    })\n});\n</file>\n</example>\n\n### Nested Example\n<example>\n<file name='script.js'>\nm.mount(root, {view: () =>\n    m(hslayout.Layout, {\n        css: 'myColumn',\n        rows: [\"150px\", \"fill\"],\n        content:[\n            m(hslayout.Layout, {columns:['20%'], content:['top left', 'top 2nd']}),\n            m(hslayout.Layout, {columns:['20%'], content:['bottom left', 'bottom 2nd']})\n        ]\n    })\n});\n</file>\n</example>\n"
			},
			"sources": [
				{
					"fileName": "overview.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 66,
			"name": "\"view/Layout\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/view/Layout.ts",
			"comment": {
				"shortText": "# Layout\nA `mithril` component class that layouts available space in the window.",
				"text": "### Invocation\ninvoked as `m(Layout, {name:<string>, content:Array<Vnode>})`\n\n### Attributes (node.attrs):\n- <key>:Array<String>, required. <key> matches a registered {@link Layouter Layouter}\n- content: Array<Vnode>, required. The Vnode children to lay out.\n- css:String, optional. The css specifier to use for this `Layout` component.\n- route: object literal holding parameters passed from `m.route`\n- href: String, optional. If present, makes the component clickable\n- onclick:(), optional. The function to call when clicked\n"
			},
			"children": [
				{
					"id": 67,
					"name": "Layout",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Base class for applying layouts. Subclasses should implement a {@link Layout.Layout.getComponents `getComponents`} method that returns\nthe components to render. The default implementation returns the conponents passed in `node.attrs.content`.\nOptionally, the subclass can also implement {@link Layout.Layout.getCSS `getCSS`} to provide the CSS class to\nassign to the component, and override the default implementation, which returns `node.attrs.css`.\n### Example:\n<code>\nimport { Layout, px, FILL }  from 'hslayout';\nconst TitleHeight   = px(30);\nconst FooterHeight  = px(10);\nclass MyLayout extends Layout {\ngetComponents(node:Vnode):Vnode {\nreturn this.layout('.my-layout', { rows:[TitleHeight, FILL, FooterHeight] }, [\nm(),\nm(),\nm()\n]);\n}\ngetCSS(node:Vnode):string {\n}\n}\n</code>"
					},
					"children": [
						{
							"id": 68,
							"name": "style",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"comment": {
								"shortText": "holds structural elements in style form: left, right, top, bottom, width, height"
							},
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 48,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 72,
							"name": "getCSS",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 73,
									"name": "getCSS",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called during the lifecycle `view` call to retrieve the css style class to apply to this container.\nThe default implementation returns components stored in `node.attrs.css`. This allows for\ncreating containers directly via mithril: `m(Layout, {content:[...], css:'.my-class'})`.\nOverride this method to create containers that return more sophisticated content."
									},
									"parameters": [
										{
											"id": 74,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Vnode",
												"id": 3
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 82,
									"character": 20
								}
							]
						},
						{
							"id": 69,
							"name": "getComponents",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true
							},
							"signatures": [
								{
									"id": 70,
									"name": "getComponents",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Called during the lifecycle `view` call to retrieve the subcomponents to render in this container.\nThe default implementation returns components stored in `node.attrs.content`. This allows for\ncreating containers directly via mithril: `m(Layout, {content:[...]})`.\nIn case `node.attrs.content` is an array of literals with a `compClass` field describing a Component class,\nthe method will create a Mithril node on that class and pass the `node.attrs.route` argument down to it.",
										"text": "Override this method to create containers that return more sophisticated content.",
										"returns": "a String, a Vnode, or an array of Strings or Vnodes\n"
									},
									"parameters": [
										{
											"id": 71,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Vnode",
												"id": 3
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Vnode",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 64,
									"character": 27
								}
							]
						},
						{
							"id": 75,
							"name": "normalizeContent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 76,
									"name": "normalizeContent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 77,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Array",
														"typeArguments": [
															{
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "Layout",
																		"id": 67
																	},
																	{
																		"type": "intrinsic",
																		"name": "string"
																	}
																]
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Vnode",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 87,
									"character": 28
								}
							]
						},
						{
							"id": 78,
							"name": "view",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 79,
									"name": "view",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "lays out the component in `components` according to the configuration in `attrs`.\nThe method returns a vnode container that has an associated `cssClass` style.\n`layout` is called during the `render` phase of the `mithril` lifecycle,\nwhich ensures an outside-in calling sequence on containers;\ni.e. the outermost containers are called first, and `node` will already have the\n`style` field set with required style attributes.\nThese are added to any `attrs` parameter provided.",
										"text": "The format for the layout configuration in `attrs` is <code>\n{<keyword>: <parameter>}\n</code>\nwhere `keyword` is the keyword with which the `Layouter` was registered.",
										"returns": "a vnode that has an associated `cssClass` style.\n"
									},
									"parameters": [
										{
											"id": 80,
											"name": "node",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Vnode",
												"id": 3
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Vnode",
										"id": 3
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layout.ts",
									"line": 119,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								68
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								72,
								69,
								75,
								78
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Layout.ts",
							"line": 44,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						67
					]
				}
			],
			"sources": [
				{
					"fileName": "view/Layout.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 42,
			"name": "\"view/Layouter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/view/Layouter.ts",
			"comment": {
				"shortText": "Layouter.ts provides basic mechanisms for laying out a view container.\nSubclasses of `Layouter` should\n- implement the {@link Layouter.Layouter.getStyles getStyles} method.\n- register the subclass and configuration keyword with the static\n{@link Layouter.Layouter.register register} method."
			},
			"children": [
				{
					"id": 43,
					"name": "Layouter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"comment": {
						"shortText": "Abstract base class for creating layout style implementations.\nSubclasses should implement `getStyles`. In addition, subclasses need to be registered with the\nstatic `Layouter.register` method.\n### Example\n<code>\nclass MyLayouter extends Layouter {\ncssClass = '.my-css-class';\nconstructor(public areaDesc:LayoutToken[]) {\nsuper(areaDesc);\n}",
						"text": "protected getStyles(components:Array<Vnode|Layout>):string {\ncomponents.map((c:Layout|Vnode, i:number) => {\nc.style = `width:auto; height:auto;\n});\nreturn this.cssClass;\n}\n}\n\nLayouter.register('MyLayouter', MyLayouter);\n</code>\n"
					},
					"children": [
						{
							"id": 59,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Layouter Constructor, will be called by the static `createLayout` method when creating the layout on a {@link hsLayout:Layout.Layout `Layout`}.\nThe `areaDesc` parameter is expected to be of the form {<keyword>: {@link hsLayout:Tokens.LayoutToken `LayoutToken`}[]}}\nand will be passed through form the `Layout` requesting the layout."
							},
							"signatures": [
								{
									"id": 61,
									"name": "new Layouter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Layouter Constructor, will be called by the static `createLayout` method when creating the layout on a {@link hsLayout:Layout.Layout `Layout`}.\nThe `areaDesc` parameter is expected to be of the form {<keyword>: {@link hsLayout:Tokens.LayoutToken `LayoutToken`}[]}}\nand will be passed through form the `Layout` requesting the layout."
									},
									"parameters": [
										{
											"id": 62,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 5
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Layouter",
										"id": 43
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 103,
									"character": 16
								}
							]
						},
						{
							"id": 60,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isExported": true,
								"isPublic": true
							},
							"comment": {
								"shortText": "\n"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 111,
									"character": 31
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 5
								}
							}
						},
						{
							"id": 58,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 103,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 44,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 43,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 45,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 46,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 43,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												46
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 43,
											"character": 24
										}
									]
								}
							}
						},
						{
							"id": 63,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isProtected": true,
								"isAbstract": true
							},
							"signatures": [
								{
									"id": 64,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `style` field on the component itself.\nDuring rendering these `style` attributes are copied to the `node.attrs.styles` field.\n### Example\n<code>protected getStyles(components:Array<Vnode|Layout>):string {\ncomponents.map((c:Layout|Vnode, i:number) => {\nc.style = `width:auto; height:auto;\n});\nreturn this.cssClass;\n}\n</code>"
									},
									"parameters": [
										{
											"id": 65,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode"
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 67
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 127,
									"character": 32
								}
							]
						},
						{
							"id": 54,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 55,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 56,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 57,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 89,
									"character": 30
								}
							]
						},
						{
							"id": 50,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 51,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```\n@param keyword the keyword used in the attributes to `this.layout`\n@param style the `Layouter` implementation to instantiate when encountering `keyword`"
									},
									"parameters": [
										{
											"id": 52,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 53,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 76,
									"character": 26
								}
							]
						},
						{
							"id": 47,
							"name": "translate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 48,
									"name": "translate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Translates `string` params to {@link hsLayout:Tokens.LayoutToken LayoutTokens}.\nThe `params` are expected to either\n- end in 'px'\n- end in '%'\n- be equal to 'fill' (case insensitive)"
									},
									"parameters": [
										{
											"id": 49,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an Array of strings that will be converted to an array of LayourTokens.\n\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reference",
												"name": "LayoutToken",
												"id": 5
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 54,
									"character": 28
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								59
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								60,
								58,
								44
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								63,
								54,
								50,
								47
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Layouter.ts",
							"line": 38,
							"character": 30
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "PillarLayouter",
							"id": 85
						},
						{
							"type": "reference",
							"name": "TileLayouter",
							"id": 189
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						43
					]
				}
			],
			"sources": [
				{
					"fileName": "view/Layouter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 81,
			"name": "\"view/PillaredLayouter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/view/PillaredLayouter.ts",
			"comment": {
				"shortText": "Lays out components in pillars, i.e. either {@link hsLayout:PillaredLayout.Columns columns}\nor {@link hsLayout:PillaredLayout.Rows rows}\nUse either of\n- `{rows: [attributes]}`\n- `{columns: [attributes]}`",
				"text": "to invoke this layout.\n\n### Example\n<code>\n{rows: [px(200), FILL]}   // --> top row has height 200px, all other rows evenly share remaining space\n{rows: [\"200px\", \"fill\"]} // --> equivalent description\n</code>\n\n## Attributes\nThe following values **v** are valid entries in The Attributes array:\n- **px(n)** or **\"<n>px\"** -- a fixed number of pixels\n- **pc(n)** or **\"<n>%\"**  -- a fixed percentage of available space\n- **FILL** or **\"fill\"**   -- a special constant to indicate - may appear only once per array.\n\nThe following options are supported for the Attributes array:\n- **[ ]**: An empty array; all components will be evenly spaced across the available width.\n- **[v]**: All components have the specified width (in px or %) and will fill the available space from the left,\nleaving any remaining unused space on the right.\n- **[v1, v2]**: All components have the specified widths (in px or %) and will fill the available space from the left,\nleaving any remaining unused space on the right. If there are more components than widths, the right-most width\nwill be used for the reminaing widgets.\n- **[v, FILL]**: Sets the first (left) widget to a width of `v`.<br>\nif `v` is specified in %, the remaining n-1 components will have equal relative widths of `(100-v)/(n-1)%`<br>\nif `v` is specified in px, the remaining n-1 components will have their right borders at location `i*100/n%`, with i=1...n.\n- **[FILL, v]**: Sets the last (right) widget to a width of `v`.<br>\nif `v` is specified in %, the remaining n-1 components will have equal relative widths of `(100-v)/(n-1)%`<br>\nif `v` is specified in px, the remaining n-1 components will have their left borders at location `i*100/n%`, with i=0...n-1.\n- **[va, FILL, vb]**: Sets the first and last widget to a width of `va`/`vb`.<br>\nBoth have to be specified either in px or in %.<br>\nif the unit is %, the remaining n-2 components will have equal relative widths of `(100-vb-va)/(n-2)%`<br>\nif the unit is px, the remaining n-2 components will have their left/right borders at location `i*100/n%`.\n- **[v1, v2, FILL, v3, v4]**: multiple widths can be specified in uninterrupted sequence both from the left and the right.\n"
			},
			"children": [
				{
					"id": 123,
					"name": "Columns",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Constructs a columns pillar layout style.<br>\nUse `{columns: [attributes]}` to invoke this layout. See top of page for a description.\n<example>\n<file name='script.js'>\nconst styles = [\n    [],                // equal spacing\n    [\"100px\"],         // fixed spacing\n    [\"60px\", \"100px\"], // fixed spacing, first one smaller\n    [\"100px\", \"fill\"], // first one fixed, rest equal\n    [\"fill\", \"100px\"], // last one fixed, rest equal\n    [\"20%\"],           // relative spacing, all equal\n    [\"20%\", \"fill\"],   // first relative, rest equal\n    [\"fill\", \"20%\"]    // last relative, rest equal\n];\nlet c = [];\nm.mount(root, {\n    view:() => m(hslayout.Layout, {\n        rows:[],  // each row a style\n        content: styles.map(i => m(hslayout.Layout, {\n            css: '.myExample',\n            content: c.map(c=>(''+i)), // the style descriptor\n            columns: i                 // a style from styles\n        }))\n    })\n});\nfunction next() {\n    if (c.length >= 5) { c = []; }\n    else { c.push(''); }\n    setTimeout(next, 2000);\n    m.redraw();\n}",
						"text": "next();\n</file>\n<file name='style.css'>\n.hs-row-layout>.myExample {\n    border-top:    1px solid white;\n    border-bottom: 1px solid white;\n}\n.myExample>.hs-layout {\n    border:    1px solid white;\n    background-color: #ccc;\n}\n.myExample {\n    color:       #a44;\n    font-size: 10px;\n    font-weight: bold;\n    text-align:  center;\n}\n</file>\n</example>\n"
					},
					"children": [
						{
							"id": 124,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 126,
									"name": "new Columns",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 127,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 5
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Columns",
										"id": 123
									},
									"overwrites": {
										"type": "reference",
										"name": "PillarLayouter.__constructor",
										"id": 94
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 284,
									"character": 38
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "PillarLayouter.__constructor",
								"id": 94
							}
						},
						{
							"id": 125,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 285,
									"character": 31
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 5
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "PillarLayouter.areaDesc",
								"id": 95
							}
						},
						{
							"id": 135,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 91,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.cssClass",
								"id": 93
							}
						},
						{
							"id": 134,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 90,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.fields",
								"id": 92
							}
						},
						{
							"id": 128,
							"name": "firstFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 87,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.firstFixed",
								"id": 86
							}
						},
						{
							"id": 129,
							"name": "lastFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 88,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.lastFixed",
								"id": 87
							}
						},
						{
							"id": 150,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 103,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.spacing",
								"id": 58
							}
						},
						{
							"id": 130,
							"name": "unit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 89,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 131,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 132,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 133,
													"name": "num",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "descriptor",
													"id": 183
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 89,
											"character": 9
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.unit",
								"id": 88
							}
						},
						{
							"id": 139,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 43,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 140,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 141,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 43,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												141
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 43,
											"character": 24
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.layoutStyles",
								"id": 44
							}
						},
						{
							"id": 136,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 137,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `styles` field on the component itself.\nDuring rendering these `styles` attributes are copied to the `node.attrs.styles` field."
									},
									"parameters": [
										{
											"id": 138,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 67
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.getStyles",
										"id": 63
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "PillarLayouter.getStyles",
										"id": 108
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 220,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.getStyles",
								"id": 63
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.getStyles",
								"id": 108
							}
						},
						{
							"id": 146,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 147,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 148,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 149,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.createLayout",
										"id": 54
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 89,
									"character": 30
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.createLayout",
								"id": 54
							}
						},
						{
							"id": 142,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 143,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```\n@param keyword the keyword used in the attributes to `this.layout`\n@param style the `Layouter` implementation to instantiate when encountering `keyword`"
									},
									"parameters": [
										{
											"id": 144,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 145,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.register",
										"id": 50
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 76,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.register",
								"id": 50
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								124
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								125,
								135,
								134,
								128,
								129,
								150,
								130,
								139
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								136,
								146,
								142
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 284,
							"character": 13
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "PillarLayouter",
							"id": 85
						}
					]
				},
				{
					"id": 85,
					"name": "PillarLayouter",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isAbstract": true
					},
					"comment": {
						"shortText": "Abstract base Layouter for creating PillarLayouter (rows, colums)"
					},
					"children": [
						{
							"id": 94,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {
								"shortText": "Constructs a Pillared layout (rows or columns).\nDetermines the `unit` (% or px) from the passed area descriptors"
							},
							"signatures": [
								{
									"id": 96,
									"name": "new PillarLayouter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs a Pillared layout (rows or columns).\nDetermines the `unit` (% or px) from the passed area descriptors"
									},
									"parameters": [
										{
											"id": 97,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Style params for either rows or columns layout"
											},
											"type": {
												"type": "reference",
												"name": "PillarParams",
												"id": 82
											}
										},
										{
											"id": 98,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Description of the requested layout\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 5
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PillarLayouter",
										"id": 85
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.__constructor",
										"id": 59
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 91,
									"character": 20
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.__constructor",
								"id": 59
							}
						},
						{
							"id": 95,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isPublic": true
							},
							"comment": {
								"shortText": "Description of the requested layout\n"
							},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 99,
									"character": 52
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 5
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "Layouter.areaDesc",
								"id": 60
							}
						},
						{
							"id": 93,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 91,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 92,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 90,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 86,
							"name": "firstFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 87,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 87,
							"name": "lastFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 88,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 122,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 103,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.spacing",
								"id": 58
							}
						},
						{
							"id": 88,
							"name": "unit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 89,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 89,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 90,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 91,
													"name": "num",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "descriptor",
													"id": 183
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 89,
											"character": 9
										}
									]
								}
							}
						},
						{
							"id": 111,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 43,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 112,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 113,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 43,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												113
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 43,
											"character": 24
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.layoutStyles",
								"id": 44
							}
						},
						{
							"id": 99,
							"name": "getSizes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 100,
									"name": "getSizes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates an iterable list of size descriptors, one for each area to be layed out.\nEach descriptor",
										"returns": "Iterable list of `num` size descriptors, one for each area to be layed out\n"
									},
									"parameters": [
										{
											"id": 101,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "the number of areas to be layed out"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "descriptor",
											"id": 183
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 130,
									"character": 20
								}
							]
						},
						{
							"id": 108,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 109,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `styles` field on the component itself.\nDuring rendering these `styles` attributes are copied to the `node.attrs.styles` field."
									},
									"parameters": [
										{
											"id": 110,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 67
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.getStyles",
										"id": 63
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 220,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.getStyles",
								"id": 63
							}
						},
						{
							"id": 102,
							"name": "unitPercent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 103,
									"name": "unitPercent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 104,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "descriptor",
											"id": 183
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 146,
									"character": 23
								}
							]
						},
						{
							"id": 105,
							"name": "unitPixel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 106,
									"name": "unitPixel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 107,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "descriptor",
											"id": 183
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 172,
									"character": 21
								}
							]
						},
						{
							"id": 118,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 119,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 120,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 121,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.createLayout",
										"id": 54
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 89,
									"character": 30
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.createLayout",
								"id": 54
							}
						},
						{
							"id": 114,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 115,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```\n@param keyword the keyword used in the attributes to `this.layout`\n@param style the `Layouter` implementation to instantiate when encountering `keyword`"
									},
									"parameters": [
										{
											"id": 116,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 117,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.register",
										"id": 50
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 76,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.register",
								"id": 50
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								94
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								95,
								93,
								92,
								86,
								87,
								122,
								88,
								111
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								99,
								108,
								102,
								105,
								118,
								114
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 86,
							"character": 29
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Layouter",
							"id": 43
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "Columns",
							"id": 123
						},
						{
							"type": "reference",
							"name": "Rows",
							"id": 151
						}
					]
				},
				{
					"id": 151,
					"name": "Rows",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Constructs a row pillar layout style.<br>\nUse `{row: [attributes]}` to invoke this layout. See top of page for a description.\n<example>\n<file name='script.js'>\nconst styles = [\n    [],                // equal spacing\n    [\"100px\"],         // fixed spacing\n    [\"60px\", \"100px\"], // fixed spacing, first one smaller\n    [\"100px\", \"fill\"], // first one fixed, rest equal\n    [\"fill\", \"100px\"], // last one fixed, rest equal\n    [\"20%\"],           // relative spacing, all equal\n    [\"20%\", \"fill\"],   // first relative, rest equal\n    [\"fill\", \"20%\"]    // last relative, rest equal\n];\nlet c = [];\nfunction next() {\n    if (c.length >= 5) { c = []; }\n    else { c.push(''); }\n    setTimeout(next, 2000);\n    m.redraw();\n}",
						"text": "m.mount(root, {\n    view:() => m(hslayout.Layout, {\n        columns:[],  // each column a style\n        content: styles.map(i => m(hslayout.Layout, {\n            css: '.myExample',\n            content: c.map(c=>(''+i)),\n            rows: i   // a style from styles\n        }))\n    })\n});\nnext();\n</file>\n<file name='style.css'>\n.hs-column-layout>.myExample {\n    border-left:  1px solid white;\n    border-right: 1px solid white;\n}\n.myExample>.hs-layout {\n    border:    1px solid white;\n    background-color: #ccc;\n}\n.myExample {\n    color:       #a44;\n    font-weight: bold;\n    font-size: 10px;\n    text-align:  center;\n}\n</file>\n</example>\n"
					},
					"children": [
						{
							"id": 152,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 154,
									"name": "new Rows",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 155,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 5
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Rows",
										"id": 151
									},
									"overwrites": {
										"type": "reference",
										"name": "PillarLayouter.__constructor",
										"id": 94
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 341,
									"character": 35
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "PillarLayouter.__constructor",
								"id": 94
							}
						},
						{
							"id": 153,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 342,
									"character": 31
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 5
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "PillarLayouter.areaDesc",
								"id": 95
							}
						},
						{
							"id": 163,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 91,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.cssClass",
								"id": 93
							}
						},
						{
							"id": 162,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 90,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.fields",
								"id": 92
							}
						},
						{
							"id": 156,
							"name": "firstFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 87,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.firstFixed",
								"id": 86
							}
						},
						{
							"id": 157,
							"name": "lastFixed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 88,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.lastFixed",
								"id": 87
							}
						},
						{
							"id": 178,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 103,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.spacing",
								"id": 58
							}
						},
						{
							"id": 158,
							"name": "unit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 89,
									"character": 8
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 159,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 160,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 161,
													"name": "num",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "descriptor",
													"id": 183
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 89,
											"character": 9
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.unit",
								"id": 88
							}
						},
						{
							"id": 167,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 43,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 168,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 169,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 43,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												169
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 43,
											"character": 24
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.layoutStyles",
								"id": 44
							}
						},
						{
							"id": 164,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 165,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `styles` field on the component itself.\nDuring rendering these `styles` attributes are copied to the `node.attrs.styles` field."
									},
									"parameters": [
										{
											"id": 166,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 67
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.getStyles",
										"id": 63
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "PillarLayouter.getStyles",
										"id": 108
									}
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 220,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.getStyles",
								"id": 63
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "PillarLayouter.getStyles",
								"id": 108
							}
						},
						{
							"id": 174,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 175,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 176,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 177,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.createLayout",
										"id": 54
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 89,
									"character": 30
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.createLayout",
								"id": 54
							}
						},
						{
							"id": 170,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 171,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```\n@param keyword the keyword used in the attributes to `this.layout`\n@param style the `Layouter` implementation to instantiate when encountering `keyword`"
									},
									"parameters": [
										{
											"id": 172,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 173,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.register",
										"id": 50
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 76,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.register",
								"id": 50
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								152
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								153,
								163,
								162,
								156,
								157,
								178,
								158,
								167
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								164,
								174,
								170
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 341,
							"character": 10
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "PillarLayouter",
							"id": 85
						}
					]
				},
				{
					"id": 82,
					"name": "PillarParams",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "interface definition for entries in `cParams`"
					},
					"children": [
						{
							"id": 83,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 56,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 84,
							"name": "fields",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 57,
									"character": 10
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								83,
								84
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 55,
							"character": 22
						}
					]
				},
				{
					"id": 183,
					"name": "descriptor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 81,
							"character": 15
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 184,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 186,
									"name": "code",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 81,
											"character": 36
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 187,
									"name": "fields",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 81,
											"character": 51
										}
									],
									"type": {
										"type": "reference",
										"name": "__type"
									}
								},
								{
									"id": 185,
									"name": "size",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/PillaredLayouter.ts",
											"line": 81,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										186,
										187,
										185
									]
								}
							],
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 81,
									"character": 17
								}
							]
						}
					}
				},
				{
					"id": 179,
					"name": "PillarLayouts",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "array of trigger keywords for column and row layout styles"
					},
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 63,
							"character": 26
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": " [\n    'columns', 'rows'\n]"
				},
				{
					"id": 180,
					"name": "cParams",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "contains style settings for the row and column layout"
					},
					"children": [
						{
							"id": 181,
							"name": "columns",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 71,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "PillarParams",
								"id": 82
							},
							"defaultValue": " <PillarParams>{\n        cssClass: '.hs-column-layout',\n        fields: ['top', 'bottom', 'left', 'right', 'height', 'width']\n    }"
						},
						{
							"id": 182,
							"name": "rows",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "view/PillaredLayouter.ts",
									"line": 75,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "PillarParams",
								"id": 82
							},
							"defaultValue": " <PillarParams>{\n        cssClass: '.hs-row-layout',\n        fields: ['left', 'right', 'top', 'bottom', 'width', 'height']\n    }"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								181,
								182
							]
						}
					],
					"sources": [
						{
							"fileName": "view/PillaredLayouter.ts",
							"line": 70,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						123,
						85,
						151
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						82
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						183
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						179
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						180
					]
				}
			],
			"sources": [
				{
					"fileName": "view/PillaredLayouter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 188,
			"name": "\"view/TileLayouter\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/view/TileLayouter.ts",
			"comment": {
				"shortText": "Lays out components in tiles\nUse\n- `{tiles: [attributes]}`",
				"text": "to invoke this layout.\n\n### Example\n<code>\n{tiles: [\"20%\"]}   // --> tiles will all have 20% of available height and width\n</code>\n<example>\n<file name='script.js'>\nlet c = [1,2,3,4,5];\n\nm.mount(root, {\n    view:() => m(hslayout.Layout, {\n        tiles:[],\n        content: c.map((c,i)=>(''+i)),\n        css: '.myExample'\n    })\n});\n\nfunction next() {\n    if (c.length >= 9) { c = []; }\n    else { c.push(''); }\n    setTimeout(next, 2000);\n    m.redraw();\n}\nnext();\n</file>\n<file name='style.css'>\n.myExample .hs-layout {\n    border: 1px solid white;\n    background-color: #ccc;\n    color:       #a44;\n    text-align:  center;\n}\n</file>\n</example>\n\n## Attributes\nThe following options are supported for the Attributes array:\n- **[ ]**: An empty array; The available tiles will cover the entire width and height.\nTheir size will adapt as tiles are added.\n- **[FILL]**: like [ ], except the last tile fills the available space.\n- **[v]**: All components have the specified width and height (in px or %) and will fill the available space from the left,\nleaving any remaining unused space on the right.\n- **[w, h]**: All components have the specified width w and height h (in px or %) and will fill the available space from the left,\nleaving any remaining unused space on the right.\n- **[v, FILL]**: like [v], except that the last tile in each row will fill the remaining available width\nand the tiles in the bottom row will fill the remaining height\n- **[w, h, FILL]**: like [w, h], except that the last tile will fill the remaining available width.\n\nv, w, and h can take on the following vakues:\n- **px(n)** or **\"_n_ px\"** -- a fixed number of pixels\n- **pc(n)** or **\"_n_ %\"**  -- a fixed percentage of available space\n- **FILL** or **\"fill\"**   -- fills the remaining space - may appear only once per array.\n\n"
			},
			"children": [
				{
					"id": 189,
					"name": "TileLayouter",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {},
					"children": [
						{
							"id": 192,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {
								"shortText": "Constructs a Tileds layout"
							},
							"signatures": [
								{
									"id": 194,
									"name": "new TileLayouter",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Constructs a Tileds layout"
									},
									"parameters": [
										{
											"id": 195,
											"name": "areaDesc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Description of the requested layout\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LayoutToken",
													"id": 5
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TileLayouter",
										"id": 189
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.__constructor",
										"id": 59
									}
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 76,
									"character": 14
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.__constructor",
								"id": 59
							}
						},
						{
							"id": 193,
							"name": "areaDesc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isConstructorProperty": true,
								"isPublic": true
							},
							"comment": {
								"shortText": "Description of the requested layout\n"
							},
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 82,
									"character": 31
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LayoutToken",
									"id": 5
								}
							},
							"overwrites": {
								"type": "reference",
								"name": "Layouter.areaDesc",
								"id": 60
							}
						},
						{
							"id": 190,
							"name": "cssClass",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 75,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 216,
							"name": "spacing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 103,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0",
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.spacing",
								"id": 58
							}
						},
						{
							"id": 191,
							"name": "unit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 76,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 205,
							"name": "layoutStyles",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"comment": {
								"shortText": "statis list of available styles. The key for each entry is the keyword that triggers the style,\nand the value is a constructor for that style"
							},
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 43,
									"character": 23
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 206,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 207,
											"name": "string",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "view/Layouter.ts",
													"line": 43,
													"character": 31
												}
											],
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												207
											]
										}
									],
									"sources": [
										{
											"fileName": "view/Layouter.ts",
											"line": 43,
											"character": 24
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.layoutStyles",
								"id": 44
							}
						},
						{
							"id": 202,
							"name": "getStyles",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true
							},
							"signatures": [
								{
									"id": 203,
									"name": "getStyles",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calculates the style attributes required for each component in `Components`.\nThese attributes are saved in a `styles` field on the component itself.\nDuring rendering these `styles` attributes are copied to the `node.attrs.styles` field."
									},
									"parameters": [
										{
											"id": 204,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Vnode",
																"id": 3
															},
															{
																"type": "reference",
																"name": "Layout",
																"id": 67
															}
														]
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "Layouter.getStyles",
										"id": 63
									}
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 156,
									"character": 23
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "Layouter.getStyles",
								"id": 63
							}
						},
						{
							"id": 196,
							"name": "unitPercent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 197,
									"name": "unitPercent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 198,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 90,
									"character": 23
								}
							]
						},
						{
							"id": 199,
							"name": "unitPixel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 200,
									"name": "unitPixel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 201,
											"name": "num",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 121,
									"character": 21
								}
							]
						},
						{
							"id": 212,
							"name": "createLayout",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 213,
									"name": "createLayout",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Lays out the `components` according to the configuration in `attrs`.\nThe method will search for a registered layout key in `attrs`, then construct the `Layouter` associated with the key\nwith the parameters for the key, and call the `getStyles` method on the style with the provided `components`.",
										"returns": "returns the css class that the `getStyles` function returns.\n"
									},
									"parameters": [
										{
											"id": 214,
											"name": "attrs",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "an object literal, typically provided as middle attributes object in the m(css, {}, '') call."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 215,
											"name": "components",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "Array",
												"typeArguments": [
													{
														"type": "reference",
														"name": "Vnode"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.createLayout",
										"id": 54
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 89,
									"character": 30
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.createLayout",
								"id": 54
							}
						},
						{
							"id": 208,
							"name": "register",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 209,
									"name": "register",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register a new Layouter style with corresponding configuration keyword.\nExample:```\nclass ColumnsLayout extends Layouter {...}\nLayouter.register('Column', Columns);\n```\n@param keyword the keyword used in the attributes to `this.layout`\n@param style the `Layouter` implementation to instantiate when encountering `keyword`"
									},
									"parameters": [
										{
											"id": 210,
											"name": "keyword",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 211,
											"name": "style",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Layouter",
												"id": 43
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Layouter.register",
										"id": 50
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Layouter.ts",
									"line": 76,
									"character": 26
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Layouter.register",
								"id": 50
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								192
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								193,
								190,
								216,
								191,
								205
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								202,
								196,
								199,
								212,
								208
							]
						}
					],
					"sources": [
						{
							"fileName": "view/TileLayouter.ts",
							"line": 74,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Layouter",
							"id": 43
						}
					]
				},
				{
					"id": 217,
					"name": "descriptor",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "view/TileLayouter.ts",
							"line": 70,
							"character": 15
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 218,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 222,
									"name": "bottom",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 70,
											"character": 64
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 224,
									"name": "height",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 70,
											"character": 93
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 220,
									"name": "left",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 70,
											"character": 35
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 221,
									"name": "right",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 70,
											"character": 49
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 219,
									"name": "top",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 70,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 223,
									"name": "width",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "view/TileLayouter.ts",
											"line": 70,
											"character": 78
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										222,
										224,
										220,
										221,
										219,
										223
									]
								}
							],
							"sources": [
								{
									"fileName": "view/TileLayouter.ts",
									"line": 70,
									"character": 17
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						189
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						217
					]
				}
			],
			"sources": [
				{
					"fileName": "view/TileLayouter.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 4,
			"name": "\"view/Tokens\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/nodejs/ts6/dev/hsLibs/mithril/hsLayout/src/view/Tokens.ts",
			"comment": {
				"shortText": "## Layout Tokens\nUsed to specify layout sizes"
			},
			"children": [
				{
					"id": 12,
					"name": "DefinedToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"comment": {
						"shortText": "A layout token that is defined in size."
					},
					"children": [
						{
							"id": 13,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 14,
									"name": "new DefinedToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 15,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DefinedToken",
										"id": 12
									},
									"overwrites": {
										"type": "reference",
										"name": "LayoutToken.__constructor",
										"id": 6
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 17,
									"character": 55
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "LayoutToken.__constructor",
								"id": 6
							}
						},
						{
							"id": 16,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 17,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "LayoutToken.getSize",
										"id": 10
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "LayoutToken.getSize",
								"id": 10
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								13
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								16
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 17,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "LayoutToken",
							"id": 5
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "PixelToken",
							"id": 23
						},
						{
							"type": "reference",
							"name": "PercentToken",
							"id": 29
						}
					]
				},
				{
					"id": 18,
					"name": "FillToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A layout token that is undefined in size, and that fill will     the available space."
					},
					"children": [
						{
							"id": 19,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 20,
									"name": "new FillToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FillToken",
										"id": 18
									},
									"overwrites": {
										"type": "reference",
										"name": "LayoutToken.__constructor",
										"id": 6
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 24,
									"character": 44
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "LayoutToken.__constructor",
								"id": 6
							}
						},
						{
							"id": 21,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 22,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "LayoutToken.getSize",
										"id": 10
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "LayoutToken.getSize",
								"id": 10
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								19
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								21
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 24,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "LayoutToken",
							"id": 5
						}
					]
				},
				{
					"id": 5,
					"name": "LayoutToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true,
						"isAbstract": true
					},
					"comment": {
						"shortText": "Abstract token for a layout area. It is defined by a single number available via the constructor."
					},
					"children": [
						{
							"id": 6,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 8,
									"name": "new LayoutToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 9,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LayoutToken",
										"id": 5
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 9,
									"character": 35
								}
							]
						},
						{
							"id": 7,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isConstructorProperty": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 10,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 10,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 11,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								6
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								7
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								10
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 9,
							"character": 33
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "DefinedToken",
							"id": 12
						},
						{
							"type": "reference",
							"name": "FillToken",
							"id": 18
						}
					]
				},
				{
					"id": 29,
					"name": "PercentToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A defined token that sets a size in percent of available space."
					},
					"children": [
						{
							"id": 30,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 31,
									"name": "new PercentToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 32,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PercentToken",
										"id": 29
									},
									"overwrites": {
										"type": "reference",
										"name": "DefinedToken.__constructor",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 38,
									"character": 48
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "DefinedToken.__constructor",
								"id": 13
							}
						},
						{
							"id": 33,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 34,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "LayoutToken.getSize",
										"id": 10
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "LayoutToken.getSize",
								"id": 10
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								30
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								33
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 38,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "DefinedToken",
							"id": 12
						}
					]
				},
				{
					"id": 23,
					"name": "PixelToken",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A defined token that sets a size in pixel."
					},
					"children": [
						{
							"id": 24,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 25,
									"name": "new PixelToken",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 26,
											"name": "size",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "PixelToken",
										"id": 23
									},
									"overwrites": {
										"type": "reference",
										"name": "DefinedToken.__constructor",
										"id": 13
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 31,
									"character": 46
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "DefinedToken.__constructor",
								"id": 13
							}
						},
						{
							"id": 27,
							"name": "getSize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isPublic": true
							},
							"signatures": [
								{
									"id": 28,
									"name": "getSize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "LayoutToken.getSize",
										"id": 10
									}
								}
							],
							"sources": [
								{
									"fileName": "view/Tokens.ts",
									"line": 11,
									"character": 18
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "LayoutToken.getSize",
								"id": 10
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								24
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								27
							]
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 31,
							"character": 23
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "DefinedToken",
							"id": 12
						}
					]
				},
				{
					"id": 41,
					"name": "FILL",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"comment": {
						"shortText": "Convenience constant, standing for an undefined fill token."
					},
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 57,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "FillToken",
						"id": 18
					},
					"defaultValue": " new FillToken()"
				},
				{
					"id": 38,
					"name": "pc",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 39,
							"name": "pc",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A convenience function that returns a defined percent-sized token"
							},
							"parameters": [
								{
									"id": 40,
									"name": "pc",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the percentage in the token\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "PercentToken",
								"id": 29
							}
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 52,
							"character": 18
						}
					]
				},
				{
					"id": 35,
					"name": "px",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 36,
							"name": "px",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A convenience function that returns a defined pixel-sized token"
							},
							"parameters": [
								{
									"id": 37,
									"name": "px",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the number of pixels in the token\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "PixelToken",
								"id": 23
							}
						}
					],
					"sources": [
						{
							"fileName": "view/Tokens.ts",
							"line": 46,
							"character": 18
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						12,
						18,
						5,
						29,
						23
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						41
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						38,
						35
					]
				}
			],
			"sources": [
				{
					"fileName": "view/Tokens.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				226,
				225,
				1,
				253,
				66,
				42,
				81,
				188,
				4
			]
		}
	]
}