{
	"id": 0,
	"name": "hsNode",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 195,
			"name": "\"cpUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/cpUtil.ts",
			"children": [
				{
					"id": 196,
					"name": "cp",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "cpUtil.ts",
							"line": 1,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('child_process')"
				},
				{
					"id": 197,
					"name": "exec",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 198,
							"name": "exec",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide the stdout and stderr streams form the child process.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "exec"
									},
									{
										"tag": "methodof",
										"text": "hsNode.cpUtil"
									},
									{
										"tag": "description",
										"text": "executes `command` in a child process and promises to return the stdout and stderr streams.\n<pre>\nlet utils = require('./cpUtils');\nutils.exec(cmd)\n.then((stdout, stderr) => {...})\n.catch(err => {...});\n</pre>"
									}
								]
							},
							"parameters": [
								{
									"id": 199,
									"name": "command",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the shell command to execute"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 200,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "the options to pass along to the shell"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 201,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 203,
													"name": "err",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "cpUtil.ts",
															"line": 30,
															"character": 56
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 202,
													"name": "out",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "cpUtil.ts",
															"line": 30,
															"character": 44
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														203,
														202
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "cpUtil.ts",
							"line": 29,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						196
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						197
					]
				}
			],
			"sources": [
				{
					"fileName": "cpUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 205,
			"name": "\"cpUtil.spec\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/cpUtil.spec.ts",
			"sources": [
				{
					"fileName": "cpUtil.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 34,
			"name": "\"date\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/date.ts",
			"comment": {
				"tags": [
					{
						"tag": "ngdoc",
						"text": "object"
					},
					{
						"tag": "name",
						"text": "hsNode.date"
					},
					{
						"tag": "description",
						"text": ".\n### Date formatting support.\nFormats are specified in a printf-style format string.\n### Example:\n<pre>\nimport date  from './date';\ndate('%MM/%DD/%YY');           // -> 08/17/16 (using current date)\nlet d = new Date('7/4/2010');\ndate('%DDDD, %MM/%DD/%YY', d); // -> Sunday, 07/04/10\n</pre>\n### Supported Formats\n- `%YY, %YYYY`           : two- or four-digit year, as '73', '1973'\n- `%M, %MM, %MMM, %MMMM` : month of year as '2', '02', 'Feb', 'February'\n- `%D, %DD`              : day of month as '5', '05' (1...31)\n- `%DDD, %DDDD`          : day of week as 'Tue', 'Tuesday'\n- `%h, %hh`              : hour of day as '7', '07 (0...23)\n- `%m, %mm`              : minutes as '6', '06' (0..59)\n- `%ss`                  : seconds as '09' (0...59)\n- `%j, %jj, %jjj`        : milliseconds as '1', '15', '159'\n"
					}
				]
			},
			"children": [
				{
					"id": 36,
					"name": "dayStr",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "translates short day names to full day names"
					},
					"sources": [
						{
							"fileName": "date.ts",
							"line": 31,
							"character": 12
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "array",
							"elementType": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					},
					"defaultValue": " [\n    ['Sun', 'Sunday'],['Mon', 'Monday'],['Tue', 'Tuesday'],['Wed', 'Wednesday'],['Thu', 'Thursday'],['Fri', 'Friday'],['Sat', 'Saturday']]"
				},
				{
					"id": 35,
					"name": "monthStr",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "translates short month names to full month names"
					},
					"sources": [
						{
							"fileName": "date.ts",
							"line": 26,
							"character": 14
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "array",
							"elementType": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					},
					"defaultValue": " [\n    ['Jan', 'January'], ['Feb', 'February'], ['Mar', 'March'], ['Apr', 'April'], ['May', 'May'], ['Jun', 'June'],\n    ['Jul', 'July'], ['Aug', 'August'], ['Sep', 'September'], ['Oct', 'October'], ['Nov', 'November'], ['Dec', 'December']]"
				},
				{
					"id": 37,
					"name": "formatNumber",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 38,
							"name": "formatNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "left-pads a `number` with zeros to match `minDigits` minimum digits"
							},
							"parameters": [
								{
									"id": 39,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 40,
									"name": "minDigits",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "date.ts",
							"line": 37,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						36,
						35
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						37
					]
				}
			],
			"sources": [
				{
					"fileName": "date.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 206,
			"name": "\"date.spec\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/date.spec.ts",
			"sources": [
				{
					"fileName": "date.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 54,
			"name": "\"excel\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/excel.ts",
			"comment": {
				"shortText": "# Excel\nConvenience functions to access tables in Excel files.\nUses the {@link https://github.com/SheetJS/js-xlsx Sheet JS xlsx parser and writer}.",
				"text": "# Excel related functions\n- {@link excel.readFile readFile}\n\n"
			},
			"children": [
				{
					"id": 63,
					"name": "ExcelFile",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 88,
							"name": "getCellValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 264,
									"character": 16
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 89,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 90,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 91,
													"name": "sheet",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"name": "WorkSheet"
															}
														]
													}
												},
												{
													"id": 92,
													"name": "col",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 93,
													"name": "row",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "excel.ts",
											"line": 264,
											"character": 17
										}
									]
								}
							}
						},
						{
							"id": 73,
							"name": "getRowsForTable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 261,
									"character": 19
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 74,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 75,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 76,
													"name": "table",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TableStruct",
														"id": 55
													}
												},
												{
													"id": 77,
													"name": "maxRows",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DataRow"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "excel.ts",
											"line": 261,
											"character": 20
										}
									]
								}
							}
						},
						{
							"id": 64,
							"name": "getSheetNames",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 259,
									"character": 17
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 65,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 66,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "excel.ts",
											"line": 259,
											"character": 18
										}
									]
								}
							}
						},
						{
							"id": 78,
							"name": "getTable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 262,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 79,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 80,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 81,
													"name": "sheetID",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 82,
													"name": "startCol",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 83,
													"name": "startRow",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Table",
												"id": 60
											}
										}
									],
									"sources": [
										{
											"fileName": "excel.ts",
											"line": 262,
											"character": 13
										}
									]
								}
							}
						},
						{
							"id": 67,
							"name": "getTableColumns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 260,
									"character": 19
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 68,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 69,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 70,
													"name": "sheetName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 71,
													"name": "startCol",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 72,
													"name": "row",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "TableStruct",
												"id": 55
											}
										}
									],
									"sources": [
										{
											"fileName": "excel.ts",
											"line": 260,
											"character": 20
										}
									]
								}
							}
						},
						{
							"id": 84,
							"name": "nextExcelColIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 263,
									"character": 21
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 85,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 86,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 87,
													"name": "startCol",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "IterableIterator",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "excel.ts",
											"line": 263,
											"character": 22
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								88,
								73,
								64,
								78,
								67,
								84
							]
						}
					],
					"sources": [
						{
							"fileName": "excel.ts",
							"line": 258,
							"character": 26
						}
					]
				},
				{
					"id": 60,
					"name": "Table",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"children": [
						{
							"id": 61,
							"name": "columns",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 254,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "TableStruct",
								"id": 55
							}
						},
						{
							"id": 62,
							"name": "table",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 255,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "DataRow"
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								61,
								62
							]
						}
					],
					"sources": [
						{
							"fileName": "excel.ts",
							"line": 253,
							"character": 22
						}
					]
				},
				{
					"id": 55,
					"name": "TableStruct",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A structure describing an Excel table"
					},
					"children": [
						{
							"id": 59,
							"name": "colIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 247,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 58,
							"name": "headerRow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 246,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 56,
							"name": "names",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 244,
									"character": 9
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 57,
							"name": "sheetName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "excel.ts",
									"line": 245,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								59,
								58,
								56,
								57
							]
						}
					],
					"sources": [
						{
							"fileName": "excel.ts",
							"line": 243,
							"character": 28
						}
					]
				},
				{
					"id": 94,
					"name": "XLSX",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"sources": [
						{
							"fileName": "excel.ts",
							"line": 12,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('xlsx')"
				},
				{
					"id": 95,
					"name": "readFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 96,
							"name": "readFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "reads and returns a promise for an {@link #/hsLog/hsNode.excelFile excel file}.\n```\n{\n\t  \t{@link excel.readFile.getSheetNames getSheetNames},\n\t\t{@link excel.readFile.getTableColumns getTableColumns},\n\t\t{@link excel.readFile.getRowsForTable getRowsForTable},\n\t\t{@link excel.readFile.getTable getTable},\n\t\t{@link excel.readFile.nextExcelColIndex nextExcelColIndex},\n\t\t{@link excel.readFile.getCellValue getCellValue}\n}\n```\n# Usage\n```\nconst excel = require('./hsNode.excel');\nconst excelFile = excel.excelFile('./aFile.xlsx');\n```",
								"returns": "an object of functions providing access to the contents of the excel file.\n"
							},
							"parameters": [
								{
									"id": 97,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the name of the Excel file to read"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 98,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ExcelFile",
								"id": 63
							}
						}
					],
					"sources": [
						{
							"fileName": "excel.ts",
							"line": 44,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						63,
						60,
						55
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						94
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						95
					]
				}
			],
			"sources": [
				{
					"fileName": "excel.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 207,
			"name": "\"excel.spec\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/excel.spec.ts",
			"children": [
				{
					"id": 208,
					"name": "TEST_FILE",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "excel.spec.ts",
							"line": 3,
							"character": 15
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "../example/test.xlsx"
					},
					"defaultValue": "\"../example/test.xlsx\""
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						208
					]
				}
			],
			"sources": [
				{
					"fileName": "excel.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 99,
			"name": "\"fsUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/fsUtil.ts",
			"children": [
				{
					"id": 100,
					"name": "Stats",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Convenience functions for file system access, wrapped in Promises.\n- {@link hsNode.fsUtil#methods_realPath realPath}\n- {@link hsNode.fsUtil#methods_pathExists pathExists}\n- {@link hsNode.fsUtil#methods_isfile isFile}\n- {@link hsNode.fsUtil#methods_isdirectory isDirectory}\n- {@link hsNode.fsUtil#methods_readDir readDir}\n- {@link hsNode.fsUtil#methods_readFile readFile}\n- {@link hsNode.fsUtil#methods_readTextFile readTextFile}\n- {@link hsNode.fsUtil#methods_readJsonFile readJsonFile}\n- {@link hsNode.fsUtil#methods_writeFile writeFile}\n- {@link hsNode.fsUtil#methods_writeTextFile writeTextFile}\n- {@link hsNode.fsUtil#methods_writeJsonFile writeJsonFile}\n- {@link hsNode.fsUtil#methods_appendFile appendFile}\n- {@link hsNode.fsUtil#methods_remove remove}"
					},
					"children": [
						{
							"id": 112,
							"name": "accessTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 35,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 110,
							"name": "blockSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 33,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 102,
							"name": "device",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 25,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 108,
							"name": "deviceID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 31,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 107,
							"name": "groupID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 30,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 103,
							"name": "iNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 26,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 113,
							"name": "modifyTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 36,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 111,
							"name": "numBlocks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 34,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 105,
							"name": "numLinks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 28,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 101,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 24,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 114,
							"name": "statusChangeTime",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 37,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 109,
							"name": "totalSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 32,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 104,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 106,
							"name": "userID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 29,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								112,
								110,
								102,
								108,
								107,
								103,
								113,
								111,
								105,
								101,
								114,
								109,
								104,
								106
							]
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 23,
							"character": 23
						}
					]
				},
				{
					"id": 115,
					"name": "fs",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 1,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('fs')"
				},
				{
					"id": 116,
					"name": "path",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 2,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('path')"
				},
				{
					"id": 171,
					"name": "appendFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 172,
							"name": "appendFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "appends to a file either as binary or text and promises no return.",
								"returns": "promise to provide nothing.\n"
							},
							"parameters": [
								{
									"id": 173,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 174,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 175,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "`true`|`false` if file should be read as `utf8`|binary"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 254,
							"character": 19
						}
					]
				},
				{
					"id": 123,
					"name": "error",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 124,
							"name": "error",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 125,
									"name": "err",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 72,
							"character": 14
						}
					]
				},
				{
					"id": 135,
					"name": "isDirectory",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 136,
							"name": "isDirectory",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines if `thePath` is a directory and promises to provide `true` or `false`.",
								"returns": "promise to provide `true` or `false`\n"
							},
							"parameters": [
								{
									"id": 137,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 119,
							"character": 20
						}
					]
				},
				{
					"id": 132,
					"name": "isFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 133,
							"name": "isFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines if `thePath` is a file and promises to provide `true` or `false`.",
								"returns": "promise to provide `true` or `false`\n"
							},
							"parameters": [
								{
									"id": 134,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 109,
							"character": 15
						}
					]
				},
				{
					"id": 138,
					"name": "isLink",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 139,
							"name": "isLink",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines if `thePath` is a directory and promises to provide `true` or `false`.",
								"returns": "promise to provide `true` or `false`\n"
							},
							"parameters": [
								{
									"id": 140,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 129,
							"character": 15
						}
					]
				},
				{
					"id": 120,
					"name": "lstat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 121,
							"name": "lstat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 122,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 57,
							"character": 14
						}
					]
				},
				{
					"id": 129,
					"name": "pathExists",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 130,
							"name": "pathExists",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines if `thePath` exists and promises to provide `true` or `false`.",
								"returns": "promise to provide `true` or `false`\n"
							},
							"parameters": [
								{
									"id": 131,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 99,
							"character": 19
						}
					]
				},
				{
					"id": 141,
					"name": "readDir",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 142,
							"name": "readDir",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "lists all files in a directory and promises to provide the list.",
								"returns": "promise to provide a list of directory entries.\n"
							},
							"parameters": [
								{
									"id": 143,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 139,
							"character": 16
						}
					]
				},
				{
					"id": 144,
					"name": "readFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 145,
							"name": "readFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "reads a file either as binary or text and promises to provide the content.",
								"returns": "promise to provide file content.\n"
							},
							"parameters": [
								{
									"id": 146,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 147,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 161,
							"character": 17
						}
					]
				},
				{
					"id": 151,
					"name": "readJsonFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 152,
							"name": "readJsonFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "reads a text file and promises to provide the content.",
								"returns": "promise to provide file content.\n"
							},
							"parameters": [
								{
									"id": 153,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 187,
							"character": 21
						}
					]
				},
				{
					"id": 148,
					"name": "readTextFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 149,
							"name": "readTextFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "reads a text file and promises to provide the content.",
								"returns": "promise to provide file content.\n"
							},
							"parameters": [
								{
									"id": 150,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to read"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 177,
							"character": 21
						}
					]
				},
				{
					"id": 126,
					"name": "realPath",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 127,
							"name": "realPath",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "determines the canonical path for `thePath`, resolving all symbolic links and '../'in the path.",
								"returns": "promise to provide the real canonical system path.\n"
							},
							"parameters": [
								{
									"id": 128,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 87,
							"character": 17
						}
					]
				},
				{
					"id": 176,
					"name": "remove",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 177,
							"name": "remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "promises to delete a file or folder.",
								"returns": "promise to provide nothing.\n"
							},
							"parameters": [
								{
									"id": 178,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 267,
							"character": 15
						}
					]
				},
				{
					"id": 117,
					"name": "stat",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 118,
							"name": "stat",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 119,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Stats",
										"id": 100
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 43,
							"character": 13
						}
					]
				},
				{
					"id": 154,
					"name": "writeFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 155,
							"name": "writeFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "writes a file either as binary or text and promises no return.",
								"returns": "promise to provide nothing.\n"
							},
							"parameters": [
								{
									"id": 156,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 157,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 158,
									"name": "isText",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "`true`|`false` if file should be read as `utf8`|binary"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 200,
							"character": 18
						}
					]
				},
				{
					"id": 167,
					"name": "writeJsonFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 168,
							"name": "writeJsonFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "writes a text file and promises no return.",
								"returns": "promise to provide nothing.\n"
							},
							"parameters": [
								{
									"id": 169,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 170,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the object to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 240,
							"character": 22
						}
					]
				},
				{
					"id": 159,
					"name": "writeStream",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 160,
							"name": "writeStream",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "writes content to a file either as a stream and promises no return.",
								"returns": "promise to provide nothing.\n"
							},
							"parameters": [
								{
									"id": 161,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 162,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the content to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 214,
							"character": 20
						}
					]
				},
				{
					"id": 163,
					"name": "writeTextFile",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 164,
							"name": "writeTextFile",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "writes a text file and promises no return.",
								"returns": "promise to provide nothing.\n"
							},
							"parameters": [
								{
									"id": 165,
									"name": "thePath",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the path to write"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 166,
									"name": "content",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 229,
							"character": 22
						}
					]
				},
				{
					"id": 179,
					"name": "fsUtil",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 193,
							"name": "appendFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 288,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "appendFile",
								"id": 171
							},
							"defaultValue": "     appendFile"
						},
						{
							"id": 183,
							"name": "isDirectory",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 278,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "isDirectory",
								"id": 135
							},
							"defaultValue": "    isDirectory"
						},
						{
							"id": 182,
							"name": "isFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 277,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "isFile",
								"id": 132
							},
							"defaultValue": "         isFile"
						},
						{
							"id": 184,
							"name": "isLink",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 279,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "isLink",
								"id": 138
							},
							"defaultValue": "         isLink"
						},
						{
							"id": 181,
							"name": "pathExists",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 276,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "pathExists",
								"id": 129
							},
							"defaultValue": "     pathExists"
						},
						{
							"id": 185,
							"name": "readDir",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 280,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "readDir",
								"id": 141
							},
							"defaultValue": "        readDir"
						},
						{
							"id": 186,
							"name": "readFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 281,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "readFile",
								"id": 144
							},
							"defaultValue": "       readFile"
						},
						{
							"id": 188,
							"name": "readJsonFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 283,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "readJsonFile",
								"id": 151
							},
							"defaultValue": "   readJsonFile"
						},
						{
							"id": 187,
							"name": "readTextFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 282,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"name": "readTextFile",
								"id": 148
							},
							"defaultValue": "   readTextFile"
						},
						{
							"id": 180,
							"name": "realPath",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 275,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "realPath",
								"id": 126
							},
							"defaultValue": "       realPath"
						},
						{
							"id": 194,
							"name": "remove",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 289,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "remove",
								"id": 176
							},
							"defaultValue": "         remove"
						},
						{
							"id": 189,
							"name": "writeFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 284,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "writeFile",
								"id": 154
							},
							"defaultValue": "      writeFile"
						},
						{
							"id": 192,
							"name": "writeJsonFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 287,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "writeJsonFile",
								"id": 167
							},
							"defaultValue": "  writeJsonFile"
						},
						{
							"id": 190,
							"name": "writeStream",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 285,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "writeStream",
								"id": 159
							},
							"defaultValue": "    writeStream"
						},
						{
							"id": 191,
							"name": "writeTextFile",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "fsUtil.ts",
									"line": 286,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "writeTextFile",
								"id": 163
							},
							"defaultValue": "  writeTextFile"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								193,
								183,
								182,
								184,
								181,
								185,
								186,
								188,
								187,
								180,
								194,
								189,
								192,
								190,
								191
							]
						}
					],
					"sources": [
						{
							"fileName": "fsUtil.ts",
							"line": 274,
							"character": 19
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						100
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						115,
						116
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						171,
						123,
						135,
						132,
						138,
						120,
						129,
						141,
						144,
						151,
						148,
						126,
						176,
						117,
						154,
						167,
						159,
						163
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						179
					]
				}
			],
			"sources": [
				{
					"fileName": "fsUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 209,
			"name": "\"fsUtil.spec\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/fsUtil.spec.ts",
			"sources": [
				{
					"fileName": "fsUtil.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 210,
			"name": "\"httpUtil\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/httpUtil.ts",
			"children": [
				{
					"id": 211,
					"name": "http",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 1,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('http')"
				},
				{
					"id": 216,
					"name": "get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 217,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide the result of the request.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "get"
									},
									{
										"tag": "methodof",
										"text": "hsNode.httpUtil"
									},
									{
										"tag": "description",
										"text": "sends a http get request and promises to return the result."
									}
								]
							},
							"parameters": [
								{
									"id": 218,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the options to pass along to the get request"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 46,
							"character": 19
						}
					]
				},
				{
					"id": 212,
					"name": "request",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 213,
							"name": "request",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "promise to provide the result of the request.\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "object"
									},
									{
										"tag": "name",
										"text": "request"
									},
									{
										"tag": "methodof",
										"text": "hsNode.httpUtil"
									},
									{
										"tag": "description",
										"text": "sends a http request and promises to return the result."
									}
								]
							},
							"parameters": [
								{
									"id": 214,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the options to pass along to the request"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 215,
									"name": "postData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "optional data to post"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "httpUtil.ts",
							"line": 22,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						211
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						216,
						212
					]
				}
			],
			"sources": [
				{
					"fileName": "httpUtil.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 204,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/index.ts",
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"log\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/log.ts",
			"comment": {
				"tags": [
					{
						"tag": "ngdoc",
						"text": "object"
					},
					{
						"tag": "name",
						"text": "hsNode.log"
					},
					{
						"tag": "description",
						"text": "Logging convenience functions.\n## Usage\n<pre>\nimport log from './log';\nlog.info('by the way:'); // -> 20160817 09:59:08.032 info by the way:\nlog.error('oh dear!');   // -> 20160817 09:59:08.045 error *** oh dear!\n</pre>\n\n### Using the format template:\n<pre>\nlog.format('%MMM %DD %hh%mm%ss');\nlog.info('by the way:');  // -> Aug 17 095908 info by the way:\nlog.error('oh dear!');    // -> Aug 17 095908 error *** oh dear!\n</pre>\n\n### With module prefix:\n<pre>\nimport log from './log';\nlog.prefix('Main');\nlog.format('%hh%mm%ss');\nlog.info('by the way:');  // -> 09:59:08.032 Main info by the way:\nlog.error('oh dear!');    // -> 09:59:08.045 Main error *** oh dear!\n</pre>\n\n### Using a log file\n<pre>\nlog.format('%MM%DD');\nlog.info('by the way:'); // -> 0817 info by the way:\nlog.logFile('l%YY%MM');  // -> 0817 info now logging to file l1608.txt\nlog.error('oh dear!');   // -> 0817 error *** oh dear!\n</pre>\n\n## Reporting Levels:\n- [DEBUG](#debug)\n- [INFO](#info)\n- [WARN](#warn)\n- [ERROR](#error)\n\n## Reporting methods\n- {@link hsNode.log#methods_debug debug()}\n- {@link hsNode.log#methods_info info()}\n- {@link hsNode.log#methods_warn warn()}\n- {@link hsNode.log#methods_error error()}\n\n## Configurations:\n- {@link hsNode.log#methods_level level()}\n- {@link hsNode.log#methods_format format()}\n- {@link hsNode.log#methods_prefix prefix()}\n- {@link hsNode.log#methods_logFile logFile()}\n"
					}
				]
			},
			"children": [
				{
					"id": 2,
					"name": "LevelDesc",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Type definition for level descriptors"
					},
					"children": [
						{
							"id": 5,
							"name": "desc",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "log.ts",
									"line": 90,
									"character": 57
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3,
							"name": "importance",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "log.ts",
									"line": 90,
									"character": 32
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 4,
							"name": "sym",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "log.ts",
									"line": 90,
									"character": 44
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "symbol"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								5,
								3,
								4
							]
						}
					],
					"sources": [
						{
							"fileName": "log.ts",
							"line": 90,
							"character": 19
						}
					]
				},
				{
					"id": 6,
					"name": "DEBUG",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "property"
							},
							{
								"tag": "propertyof",
								"text": "hsNode.log"
							},
							{
								"tag": "name",
								"text": "DEBUG"
							},
							{
								"tag": "description",
								"text": "Debug reporting level with importance 0\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 64,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": " Symbol('DEBUG')"
				},
				{
					"id": 9,
					"name": "ERROR",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "property"
							},
							{
								"tag": "propertyof",
								"text": "hsNode.log"
							},
							{
								"tag": "name",
								"text": "ERROR"
							},
							{
								"tag": "description",
								"text": "Warning reporting level with importance 3\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 85,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": " Symbol('ERROR')"
				},
				{
					"id": 7,
					"name": "INFO",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "property"
							},
							{
								"tag": "name",
								"text": "INFO"
							},
							{
								"tag": "propertyof",
								"text": "hsNode.log"
							},
							{
								"tag": "description",
								"text": "Info reporting level with importance 1\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 71,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": " Symbol('INFO')"
				},
				{
					"id": 8,
					"name": "WARN",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "property"
							},
							{
								"tag": "name",
								"text": "WARN"
							},
							{
								"tag": "propertyof",
								"text": "hsNode.log"
							},
							{
								"tag": "description",
								"text": "Info reporting level with importance 2\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 78,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "symbol"
					},
					"defaultValue": " Symbol('WARN')"
				},
				{
					"id": 16,
					"name": "gDateFormat",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "current date format string. See [date module]('_date_.html')"
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 105,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"%YYYY%MM%DD %hh:%mm:%ss.%jjj\""
				},
				{
					"id": 15,
					"name": "gLevel",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "current reporting level, same across all modules"
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 101,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "LevelDesc",
						"id": 2
					},
					"defaultValue": " (gLevel===undefined)? gLevels[INFO] : gLevel"
				},
				{
					"id": 17,
					"name": "gLogFile",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "name of the current log file, or undefined"
					},
					"sources": [
						{
							"fileName": "log.ts",
							"line": 108,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 18,
					"name": "log",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 19,
							"name": "log",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 20,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 21,
											"name": "DEBUG",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 272,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "symbol"
											},
											"defaultValue": "\t    DEBUG"
										},
										{
											"id": 24,
											"name": "ERROR",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 275,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "symbol"
											},
											"defaultValue": "\t    ERROR"
										},
										{
											"id": 22,
											"name": "INFO",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 273,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "symbol"
											},
											"defaultValue": "\t    INFO"
										},
										{
											"id": 23,
											"name": "WARN",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 274,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "symbol"
											},
											"defaultValue": "\t    WARN"
										},
										{
											"id": 33,
											"name": "config",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 284,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "defaultConfig"
											},
											"defaultValue": "     defaultConfig"
										},
										{
											"id": 30,
											"name": "dateFormat",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 281,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "dateFormat"
											},
											"defaultValue": " dateFormat"
										},
										{
											"id": 26,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 277,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "debug"
											},
											"defaultValue": "\t    debug"
										},
										{
											"id": 29,
											"name": "error",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 280,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "error"
											},
											"defaultValue": "\t    error"
										},
										{
											"id": 27,
											"name": "info",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 278,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "info"
											},
											"defaultValue": " \t    info"
										},
										{
											"id": 25,
											"name": "level",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 276,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "level"
											},
											"defaultValue": "\t    level"
										},
										{
											"id": 32,
											"name": "logFile",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 283,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "logFile"
											},
											"defaultValue": "    logFile"
										},
										{
											"id": 31,
											"name": "prefix",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 282,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"name": "prefix"
											},
											"defaultValue": "\t    prefix"
										},
										{
											"id": 28,
											"name": "warn",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "log.ts",
													"line": 279,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "warn"
											},
											"defaultValue": "\t    warn"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												21,
												24,
												22,
												23,
												33,
												30,
												26,
												29,
												27,
												25,
												32,
												31,
												28
											]
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "log.ts",
							"line": 111,
							"character": 12
						}
					]
				},
				{
					"id": 10,
					"name": "gLevels",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"comment": {
						"shortText": "map of valid reporting levels"
					},
					"children": [
						{
							"id": 11,
							"name": "__computed",
							"kind": 2097152,
							"kindString": "Object literal",
							"flags": {},
							"children": [
								{
									"id": 14,
									"name": "desc",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "log.ts",
											"line": 94,
											"character": 48
										},
										{
											"fileName": "log.ts",
											"line": 95,
											"character": 48
										},
										{
											"fileName": "log.ts",
											"line": 96,
											"character": 48
										},
										{
											"fileName": "log.ts",
											"line": 97,
											"character": 48
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "\"ERROR\""
								},
								{
									"id": 12,
									"name": "importance",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "log.ts",
											"line": 94,
											"character": 27
										},
										{
											"fileName": "log.ts",
											"line": 95,
											"character": 27
										},
										{
											"fileName": "log.ts",
											"line": 96,
											"character": 27
										},
										{
											"fileName": "log.ts",
											"line": 97,
											"character": 27
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "3"
								},
								{
									"id": 13,
									"name": "sym",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "log.ts",
											"line": 94,
											"character": 35
										},
										{
											"fileName": "log.ts",
											"line": 95,
											"character": 35
										},
										{
											"fileName": "log.ts",
											"line": 96,
											"character": 35
										},
										{
											"fileName": "log.ts",
											"line": 97,
											"character": 35
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "symbol"
									},
									"defaultValue": " ERROR"
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										14,
										12,
										13
									]
								}
							],
							"sources": [
								{
									"fileName": "log.ts",
									"line": 94,
									"character": 11
								},
								{
									"fileName": "log.ts",
									"line": 95,
									"character": 10
								},
								{
									"fileName": "log.ts",
									"line": 96,
									"character": 10
								},
								{
									"fileName": "log.ts",
									"line": 97,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					],
					"groups": [
						{
							"title": "Object literals",
							"kind": 2097152,
							"children": [
								11
							]
						}
					],
					"sources": [
						{
							"fileName": "log.ts",
							"line": 93,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						2
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						6,
						9,
						7,
						8,
						16,
						15,
						17
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						18
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						10
					]
				}
			],
			"sources": [
				{
					"fileName": "log.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 219,
			"name": "\"log.spec\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/log.spec.ts",
			"sources": [
				{
					"fileName": "log.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 41,
			"name": "\"node\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/node.ts",
			"children": [
				{
					"id": 42,
					"name": "util",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "ngdoc",
								"text": "overview"
							},
							{
								"tag": "name",
								"text": "hsNode"
							},
							{
								"tag": "description",
								"text": "\nUtility Modules for use with Node.js\n======================================\nProvides\n- {@link hsNode.log log}: logging support\n- {@link hsNode.date date}: sprintf-style date formatting\n- {@link hsNode.excel excel}: reading tables from Excel files\n- {@link hsNode.hsLibs hsLibs}: NodeJS module wrapper for hs and hsData libraries\n\n# Test Status: NodeJS\n<iframe src='../../libraries/hsNode/tests/index.html'\n\t\tstyle=\"border:none; \"\n\t\twidth=\"130%\" height=\"500px\">\n</iframe>\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node.ts",
							"line": 20,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"defaultValue": " require('util')"
				},
				{
					"id": 51,
					"name": "delay",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 52,
							"name": "delay",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "a Promise that resolves after `ms`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "function"
									},
									{
										"tag": "name",
										"text": "delay"
									},
									{
										"tag": "methodof",
										"text": "hsNode.hsLibs"
									},
									{
										"tag": "description",
										"text": "delay promise for use in delay(ms).then(doSomething)."
									}
								]
							},
							"parameters": [
								{
									"id": 53,
									"name": "ms",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "node.ts",
							"line": 54,
							"character": 21
						}
					]
				},
				{
					"id": 43,
					"name": "inspect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 44,
							"name": "inspect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "a color-formatted string representing `obj`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "function"
									},
									{
										"tag": "name",
										"text": "inspect"
									},
									{
										"tag": "methodof",
										"text": "hsNode.hsLibs"
									},
									{
										"tag": "description",
										"text": "inspects the provided obj using the node utilities inspect function."
									}
								]
							},
							"parameters": [
								{
									"id": 45,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the object to inspect"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 46,
									"name": "depth",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the depth-level to report on, or inifinite depth if omitted"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "null"
								},
								{
									"id": 47,
									"name": "colors",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "true"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "node.ts",
							"line": 32,
							"character": 23
						}
					]
				},
				{
					"id": 48,
					"name": "timeout",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 49,
							"name": "timeout",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "a Promise that rejects after `ms`\n",
								"tags": [
									{
										"tag": "ngdoc",
										"text": "function"
									},
									{
										"tag": "name",
										"text": "timeout"
									},
									{
										"tag": "methodof",
										"text": "hsNode.hsLibs"
									},
									{
										"tag": "description",
										"text": "timeout promise for use in Promise.race()."
									}
								]
							},
							"parameters": [
								{
									"id": 50,
									"name": "ms",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "the milliseconds to wait before rejecting"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "Object"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "node.ts",
							"line": 44,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						42
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						51,
						43,
						48
					]
				}
			],
			"sources": [
				{
					"fileName": "node.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 220,
			"name": "\"node.spec\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/sth1pal/Documents/Development/JavaScript/node.js/ts6/dev/hsLibs/node/hsNode/src/node.spec.ts",
			"sources": [
				{
					"fileName": "node.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				195,
				205,
				34,
				206,
				54,
				207,
				99,
				209,
				210,
				204,
				1,
				219,
				41,
				220
			]
		}
	]
}